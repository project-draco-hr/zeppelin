{
  if (!endToEndTestEnabled()) {
    return;
  }
  try {
    setTextOfParagraph(1,"sc.version");
    runParagraph(1);
    waitForParagraph(1,"FINISHED");
    setTextOfParagraph(2,"import org.apache.commons.io.IOUtils\\n" + "import java.net.URL\\n" + "import java.nio.charset.Charset\\n"+ "val bankText = sc.parallelize(IOUtils.toString(new URL(\"https://s3.amazonaws.com/apache-zeppelin/tutorial/bank/bank.csv\"),Charset.forName(\"utf8\")).split(\"\\\\n\"))\\n"+ "case class Bank(age: Integer, job: String, marital: String, education: String, balance: Integer)\\n"+ "\\n"+ "val bank = bankText.map(s => s.split(\";\")).filter(s => s(0) != \"\\\\\"age\\\\\"\").map(s => Bank(s(0).toInt,s(1).replaceAll(\"\\\\\"\", \"\"),s(2).replaceAll(\"\\\\\"\", \"\"),s(3).replaceAll(\"\\\\\"\", \"\"),s(5).replaceAll(\"\\\\\"\", \"\").toInt)).toDF()\\n"+ "bank.registerTempTable(\"bank\")");
    runParagraph(2);
    try {
      waitForParagraph(2,"FINISHED");
    }
 catch (    TimeoutException e) {
      waitForParagraph(2,"ERROR");
      collector.checkThat("2nd Paragraph from SparkParagraphIT of testSpark status:","ERROR",CoreMatchers.equalTo("FINISHED"));
    }
    WebElement paragraph2Result=driver.findElement(By.xpath(getParagraphXPath(2) + "//div[@class=\"tableDisplay\"]"));
    collector.checkThat("2nd Paragraph from SparkParagraphIT of testSpark result: ",paragraph2Result.getText().toString(),CoreMatchers.containsString("import org.apache.commons.io.IOUtils"));
  }
 catch (  Exception e) {
    handleException("Exception in SparkParagraphIT while testSpark",e);
  }
}
