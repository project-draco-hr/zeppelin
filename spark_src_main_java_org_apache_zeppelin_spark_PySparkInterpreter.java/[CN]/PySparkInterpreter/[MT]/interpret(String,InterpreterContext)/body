{
  SparkInterpreter sparkInterpreter=getSparkInterpreter();
  if (sparkInterpreter.getSparkVersion().isUnsupportedVersion()) {
    return new InterpreterResult(Code.ERROR,"Spark " + sparkInterpreter.getSparkVersion().toString() + " is not supported");
  }
  if (!pythonscriptRunning) {
    return new InterpreterResult(Code.ERROR,"python process not running" + outputStream.toString());
  }
  outputStream.setInterpreterOutput(context.out);
synchronized (pythonScriptInitializeNotifier) {
    long startTime=System.currentTimeMillis();
    while (pythonScriptInitialized == false && pythonscriptRunning && System.currentTimeMillis() - startTime < MAX_TIMEOUT_SEC * 1000) {
      try {
        pythonScriptInitializeNotifier.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  String errorMessage="";
  try {
    context.out.flush();
    errorMessage=new String(context.out.toByteArray());
  }
 catch (  IOException e) {
    throw new InterpreterException(e);
  }
  if (pythonscriptRunning == false) {
    return new InterpreterResult(Code.ERROR,"failed to start pyspark" + errorMessage);
  }
  if (pythonScriptInitialized == false) {
    return new InterpreterResult(Code.ERROR,"pyspark is not responding " + errorMessage);
  }
  if (!sparkInterpreter.getSparkVersion().isPysparkSupported()) {
    return new InterpreterResult(Code.ERROR,"pyspark " + sparkInterpreter.getSparkContext().version() + " is not supported");
  }
  String jobGroup=sparkInterpreter.getJobGroup(context);
  ZeppelinContext z=sparkInterpreter.getZeppelinContext();
  z.setInterpreterContext(context);
  z.setGui(context.getGui());
  pythonInterpretRequest=new PythonInterpretRequest(st,jobGroup);
  statementOutput=null;
synchronized (statementSetNotifier) {
    statementSetNotifier.notify();
  }
synchronized (statementFinishedNotifier) {
    while (statementOutput == null) {
      try {
        statementFinishedNotifier.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  if (statementError) {
    return new InterpreterResult(Code.ERROR,statementOutput);
  }
 else {
    try {
      context.out.flush();
    }
 catch (    IOException e) {
      throw new InterpreterException(e);
    }
    return new InterpreterResult(Code.SUCCESS);
  }
}
