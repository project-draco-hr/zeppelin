{
  final Settings settings=Settings.settingsBuilder().put("cluster.name",ELS_CLUSTER_NAME).put("network.host",ELS_HOST).put("http.port",ELS_HTTP_PORT).put("transport.tcp.port",ELS_TRANSPORT_PORT).put("path.home",ELS_PATH).build();
  elsNode=NodeBuilder.nodeBuilder().settings(settings).node();
  elsClient=elsNode.client();
  elsClient.admin().indices().prepareCreate("logs").addMapping("http",jsonBuilder().startObject().startObject("http").startObject("properties").startObject("content_length").field("type","integer").endObject().endObject().endObject().endObject()).get();
  for (int i=0; i < 50; i++) {
    elsClient.prepareIndex("logs","http","" + i).setRefresh(true).setSource(jsonBuilder().startObject().field("date",new Date()).startObject("request").field("method",METHODS[RandomUtils.nextInt(METHODS.length)]).field("url","/zeppelin/" + UUID.randomUUID().toString()).field("headers",Arrays.asList("Accept: *.*","Host: apache.org")).endObject().field("status",STATUS[RandomUtils.nextInt(STATUS.length)]).field("content_length",RandomUtils.nextInt(2000))).get();
  }
  final Properties props=new Properties();
  props.put(ElasticsearchInterpreter.ELASTICSEARCH_HOST,ELS_HOST);
  props.put(ElasticsearchInterpreter.ELASTICSEARCH_PORT,ELS_TRANSPORT_PORT);
  props.put(ElasticsearchInterpreter.ELASTICSEARCH_CLUSTER_NAME,ELS_CLUSTER_NAME);
  interpreter=new ElasticsearchInterpreter(props);
  interpreter.open();
}
