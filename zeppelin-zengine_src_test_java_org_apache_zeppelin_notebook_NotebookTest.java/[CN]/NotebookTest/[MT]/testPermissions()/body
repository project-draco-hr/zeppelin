{
  Note note=notebook.createNote();
  NotebookAuthorization notebookAuthorization=notebook.getNotebookAuthorization();
  assertEquals(notebookAuthorization.isOwner(note.id(),new HashSet<String>(Arrays.asList("user2"))),true);
  assertEquals(notebookAuthorization.isReader(note.id(),new HashSet<String>(Arrays.asList("user2"))),true);
  assertEquals(notebookAuthorization.isWriter(note.id(),new HashSet<String>(Arrays.asList("user2"))),true);
  notebookAuthorization.setOwners(note.id(),new HashSet<String>(Arrays.asList("user1")));
  notebookAuthorization.setReaders(note.id(),new HashSet<String>(Arrays.asList("user1","user2")));
  notebookAuthorization.setWriters(note.id(),new HashSet<String>(Arrays.asList("user1")));
  assertEquals(notebookAuthorization.isOwner(note.id(),new HashSet<String>(Arrays.asList("user2"))),false);
  assertEquals(notebookAuthorization.isOwner(note.id(),new HashSet<String>(Arrays.asList("user1"))),true);
  assertEquals(notebookAuthorization.isReader(note.id(),new HashSet<String>(Arrays.asList("user3"))),false);
  assertEquals(notebookAuthorization.isReader(note.id(),new HashSet<String>(Arrays.asList("user2"))),true);
  assertEquals(notebookAuthorization.isWriter(note.id(),new HashSet<String>(Arrays.asList("user2"))),false);
  assertEquals(notebookAuthorization.isWriter(note.id(),new HashSet<String>(Arrays.asList("user1"))),true);
  notebookAuthorization.setReaders(note.id(),Sets.<String>newHashSet());
  assertEquals(notebookAuthorization.isReader(note.id(),new HashSet<String>(Arrays.asList("user2"))),true);
  assertEquals(notebookAuthorization.isReader(note.id(),new HashSet<String>(Arrays.asList("user3"))),true);
  notebook.removeNote(note.id());
}
