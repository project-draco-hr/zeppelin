{
  final AtomicInteger onNoteRemove=new AtomicInteger(0);
  final AtomicInteger onNoteCreate=new AtomicInteger(0);
  final AtomicInteger onParagraphRemove=new AtomicInteger(0);
  final AtomicInteger onParagraphCreate=new AtomicInteger(0);
  final AtomicInteger unbindInterpreter=new AtomicInteger(0);
  notebook.addNotebookEventListener(new NotebookEventListener(){
    @Override public void onNoteRemove(    Note note){
      onNoteRemove.incrementAndGet();
    }
    @Override public void onNoteCreate(    Note note){
      onNoteCreate.incrementAndGet();
    }
    @Override public void onUnbindInterpreter(    Note note,    InterpreterSetting setting){
      unbindInterpreter.incrementAndGet();
    }
    @Override public void onParagraphRemove(    Paragraph p){
      onParagraphRemove.incrementAndGet();
    }
    @Override public void onParagraphCreate(    Paragraph p){
      onParagraphCreate.incrementAndGet();
    }
    @Override public void onParagraphStatusChange(    Paragraph p,    Status status){
    }
  }
);
  Note note1=notebook.createNote(null);
  assertEquals(1,onNoteCreate.get());
  Paragraph p1=note1.addParagraph();
  assertEquals(1,onParagraphCreate.get());
  note1.addCloneParagraph(p1);
  assertEquals(2,onParagraphCreate.get());
  note1.removeParagraph(p1.getId());
  assertEquals(1,onParagraphRemove.get());
  List<String> settings=notebook.getBindedInterpreterSettingsIds(note1.id());
  notebook.bindInterpretersToNote(note1.id(),new LinkedList<String>());
  assertEquals(settings.size(),unbindInterpreter.get());
  notebook.removeNote(note1.getId(),null);
  assertEquals(1,onNoteRemove.get());
  assertEquals(1,onParagraphRemove.get());
}
