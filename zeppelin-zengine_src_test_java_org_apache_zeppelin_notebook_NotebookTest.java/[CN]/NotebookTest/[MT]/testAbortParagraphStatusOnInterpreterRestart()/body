{
  Note note=notebook.createNote();
  note.getNoteReplLoader().setInterpreters(factory.getDefaultInterpreterSettingList());
  Paragraph p1=note.addParagraph();
  p1.setText("p1");
  Paragraph p2=note.addParagraph();
  p2.setText("p2");
  Paragraph p3=note.addParagraph();
  p3.setText("p3");
  Paragraph p4=note.addParagraph();
  p4.setText("p4");
  assertEquals(Job.Status.READY,p1.getStatus());
  assertEquals(Job.Status.READY,p2.getStatus());
  assertEquals(Job.Status.READY,p3.getStatus());
  assertEquals(Job.Status.READY,p4.getStatus());
  note.runAll();
  assertTrue(p1.getStatus() == Job.Status.PENDING || p1.getStatus() == Job.Status.RUNNING);
  assertEquals(Job.Status.PENDING,p2.getStatus());
  assertEquals(Job.Status.PENDING,p3.getStatus());
  assertEquals(Job.Status.PENDING,p4.getStatus());
  while (p1.isTerminated() == false || (p2.getStatus() == Job.Status.PENDING))   Thread.yield();
  assertEquals(Job.Status.FINISHED,p1.getStatus());
  assertEquals(Job.Status.RUNNING,p2.getStatus());
  assertEquals(Job.Status.PENDING,p3.getStatus());
  assertEquals(Job.Status.PENDING,p4.getStatus());
  factory.restart(note.getNoteReplLoader().getInterpreterSettings().get(0).id());
  assertEquals(Job.Status.FINISHED,p1.getStatus());
  assertEquals(Job.Status.ABORT,p2.getStatus());
  assertEquals(Job.Status.ABORT,p3.getStatus());
  assertEquals(Job.Status.ABORT,p4.getStatus());
}
