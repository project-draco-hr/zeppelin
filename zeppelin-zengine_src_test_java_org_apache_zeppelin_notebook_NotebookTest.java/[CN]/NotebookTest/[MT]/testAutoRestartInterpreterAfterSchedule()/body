{
  Note note=notebook.createNote(null);
  note.getNoteReplLoader().setInterpreters(factory.getDefaultInterpreterSettingList());
  Paragraph p=note.addParagraph();
  Map config=new HashMap<String,Object>();
  p.setConfig(config);
  p.setText("sleep 1000");
  Paragraph p2=note.addParagraph();
  p2.setConfig(config);
  p2.setText("%mock2 sleep 500");
  config=note.getConfig();
  config.put("enabled",true);
  config.put("cron","1/3 * * * * ?");
  config.put("releaseresource",true);
  note.setConfig(config);
  notebook.refreshCron(note.id());
  MockInterpreter1 mock1=((MockInterpreter1)(((ClassloaderInterpreter)((LazyOpenInterpreter)note.getNoteReplLoader().get("mock1")).getInnerInterpreter()).getInnerInterpreter()));
  MockInterpreter2 mock2=((MockInterpreter2)(((ClassloaderInterpreter)((LazyOpenInterpreter)note.getNoteReplLoader().get("mock2")).getInnerInterpreter()).getInnerInterpreter()));
  while (!mock1.isOpen() || !mock2.isOpen()) {
    Thread.yield();
  }
  while (mock1.isOpen() || mock2.isOpen()) {
    Thread.yield();
  }
  config.put("cron",null);
  note.setConfig(config);
  notebook.refreshCron(note.id());
  assertNotNull(p.getDateFinished());
  assertNotNull(p2.getDateFinished());
}
