{
  Notebook notebook=notebook();
  try {
    Message messagereceived=deserializeMessage(msg);
    LOG.debug("RECEIVE << " + messagereceived.op);
    LOG.debug("RECEIVE PRINCIPAL << " + messagereceived.principal);
    LOG.debug("RECEIVE TICKET << " + messagereceived.ticket);
    LOG.debug("RECEIVE ROLES << " + messagereceived.roles);
    if (LOG.isTraceEnabled()) {
      LOG.trace("RECEIVE MSG = " + messagereceived);
    }
    String ticket=TicketContainer.instance.getTicket(messagereceived.principal);
    if (ticket != null && !ticket.equals(messagereceived.ticket))     throw new Exception("Invalid ticket " + messagereceived.ticket + " != "+ ticket);
    ZeppelinConfiguration conf=ZeppelinConfiguration.create();
    boolean allowAnonymous=conf.getBoolean(ZeppelinConfiguration.ConfVars.ZEPPELIN_ANONYMOUS_ALLOWED);
    if (!allowAnonymous && messagereceived.principal.equals("anonymous")) {
      throw new Exception("Anonymous access not allowed ");
    }
    HashSet<String> userAndRoles=new HashSet<String>();
    userAndRoles.add(messagereceived.principal);
    if (!messagereceived.roles.equals("")) {
      HashSet<String> roles=gson.fromJson(messagereceived.roles,new TypeToken<HashSet<String>>(){
      }
.getType());
      if (roles != null) {
        userAndRoles.addAll(roles);
      }
    }
    AuthenticationInfo subject=new AuthenticationInfo(messagereceived.principal);
switch (messagereceived.op) {
case LIST_NOTES:
      unicastNoteList(conn,subject);
    break;
case RELOAD_NOTES_FROM_REPO:
  broadcastReloadedNoteList(subject);
break;
case GET_HOME_NOTE:
sendHomeNote(conn,userAndRoles,notebook,messagereceived);
break;
case GET_NOTE:
sendNote(conn,userAndRoles,notebook,messagereceived);
break;
case NEW_NOTE:
createNote(conn,userAndRoles,notebook,messagereceived);
break;
case DEL_NOTE:
removeNote(conn,userAndRoles,notebook,messagereceived);
break;
case CLONE_NOTE:
cloneNote(conn,userAndRoles,notebook,messagereceived);
break;
case IMPORT_NOTE:
importNote(conn,userAndRoles,notebook,messagereceived);
break;
case COMMIT_PARAGRAPH:
updateParagraph(conn,userAndRoles,notebook,messagereceived);
break;
case RUN_PARAGRAPH:
runParagraph(conn,userAndRoles,notebook,messagereceived);
break;
case CANCEL_PARAGRAPH:
cancelParagraph(conn,userAndRoles,notebook,messagereceived);
break;
case MOVE_PARAGRAPH:
moveParagraph(conn,userAndRoles,notebook,messagereceived);
break;
case INSERT_PARAGRAPH:
insertParagraph(conn,userAndRoles,notebook,messagereceived);
break;
case PARAGRAPH_REMOVE:
removeParagraph(conn,userAndRoles,notebook,messagereceived);
break;
case PARAGRAPH_CLEAR_OUTPUT:
clearParagraphOutput(conn,userAndRoles,notebook,messagereceived);
break;
case NOTE_UPDATE:
updateNote(conn,userAndRoles,notebook,messagereceived);
break;
case COMPLETION:
completion(conn,userAndRoles,notebook,messagereceived);
break;
case PING:
break;
case ANGULAR_OBJECT_UPDATED:
angularObjectUpdated(conn,userAndRoles,notebook,messagereceived);
break;
case ANGULAR_OBJECT_CLIENT_BIND:
angularObjectClientBind(conn,userAndRoles,notebook,messagereceived);
break;
case ANGULAR_OBJECT_CLIENT_UNBIND:
angularObjectClientUnbind(conn,userAndRoles,notebook,messagereceived);
break;
case LIST_CONFIGURATIONS:
sendAllConfigurations(conn,userAndRoles,notebook);
break;
case CHECKPOINT_NOTEBOOK:
checkpointNotebook(conn,notebook,messagereceived);
break;
case LIST_REVISION_HISTORY:
listRevisionHistory(conn,notebook,messagereceived);
break;
case NOTE_REVISION:
getNoteRevision(conn,notebook,messagereceived);
break;
case LIST_NOTEBOOK_JOBS:
unicastNotebookJobInfo(conn,messagereceived);
break;
case LIST_UPDATE_NOTEBOOK_JOBS:
unicastUpdateNotebookJobInfo(conn,messagereceived);
break;
case GET_INTERPRETER_BINDINGS:
getInterpreterBindings(conn,messagereceived);
break;
case SAVE_INTERPRETER_BINDINGS:
saveInterpreterBindings(conn,messagereceived);
break;
default :
break;
}
}
 catch (Exception e) {
LOG.error("Can't handle message",e);
}
}
