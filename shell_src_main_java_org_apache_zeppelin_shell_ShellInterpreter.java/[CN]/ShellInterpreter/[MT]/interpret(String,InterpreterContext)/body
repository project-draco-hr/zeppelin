{
  logger.debug("Run shell command '" + cmd + "'");
  CommandLine cmdLine=CommandLine.parse(shell);
  if (isWindows) {
    String[] lines=StringUtils.split(cmd,"\n");
    cmd=StringUtils.join(lines," && ");
  }
  cmdLine.addArgument(cmd,false);
  DefaultExecutor executor=new DefaultExecutor();
  ByteArrayOutputStream errorStream=new ByteArrayOutputStream();
  executor.setStreamHandler(new PumpStreamHandler(contextInterpreter.out,errorStream));
  executor.setWatchdog(new ExecuteWatchdog(commandTimeOut));
  Job runningJob=getRunningJob(contextInterpreter.getParagraphId());
  Map<String,Object> info=runningJob.info();
  info.put(EXECUTOR_KEY,executor);
  try {
    int exitVal=executor.execute(cmdLine);
    logger.info("Paragraph " + contextInterpreter.getParagraphId() + "return with exit value: "+ exitVal);
    return new InterpreterResult(InterpreterResult.Code.SUCCESS,null);
  }
 catch (  ExecuteException e) {
    int exitValue=e.getExitValue();
    logger.error("Can not run " + cmd,e);
    Code code=Code.ERROR;
    String msg=errorStream.toString();
    if (exitValue == 143) {
      code=Code.INCOMPLETE;
      msg=msg + "Paragraph received a SIGTERM.\n";
      logger.info("The paragraph " + contextInterpreter.getParagraphId() + " stopped executing: "+ msg);
    }
    msg+="ExitValue: " + exitValue;
    return new InterpreterResult(code,msg);
  }
catch (  IOException e) {
    logger.error("Can not run " + cmd,e);
    return new InterpreterResult(Code.ERROR,e.getMessage());
  }
}
