{
  Client client=null;
  while (!shutdown && interpreterProcess.isRunning()) {
    try {
      client=interpreterProcess.getClient();
    }
 catch (    Exception e1) {
      logger.error("Can't get RemoteInterpreterEvent",e1);
      waitQuietly();
      continue;
    }
    RemoteInterpreterEvent event=null;
    boolean broken=false;
    try {
      event=client.getEvent();
    }
 catch (    TException e) {
      broken=true;
      logger.error("Can't get RemoteInterpreterEvent",e);
      waitQuietly();
      continue;
    }
 finally {
      interpreterProcess.releaseClient(client,broken);
    }
    Gson gson=new Gson();
    AngularObjectRegistry angularObjectRegistry=interpreterGroup.getAngularObjectRegistry();
    try {
      if (event.getType() == RemoteInterpreterEventType.NO_OP) {
        continue;
      }
 else       if (event.getType() == RemoteInterpreterEventType.ANGULAR_OBJECT_ADD) {
        AngularObject angularObject=gson.fromJson(event.getData(),AngularObject.class);
        angularObjectRegistry.add(angularObject.getName(),angularObject.get(),angularObject.getNoteId());
      }
 else       if (event.getType() == RemoteInterpreterEventType.ANGULAR_OBJECT_UPDATE) {
        AngularObject angularObject=gson.fromJson(event.getData(),AngularObject.class);
        AngularObject localAngularObject=angularObjectRegistry.get(angularObject.getName(),angularObject.getNoteId());
        if (localAngularObject instanceof RemoteAngularObject) {
          ((RemoteAngularObject)localAngularObject).set(angularObject.get(),true,false);
        }
 else {
          localAngularObject.set(angularObject.get());
        }
      }
 else       if (event.getType() == RemoteInterpreterEventType.ANGULAR_OBJECT_REMOVE) {
        AngularObject angularObject=gson.fromJson(event.getData(),AngularObject.class);
        angularObjectRegistry.remove(angularObject.getName(),angularObject.getNoteId());
      }
 else       if (event.getType() == RemoteInterpreterEventType.RUN_INTERPRETER_CONTEXT_RUNNER) {
        InterpreterContextRunner runnerFromRemote=gson.fromJson(event.getData(),RemoteInterpreterContextRunner.class);
        interpreterProcess.getInterpreterContextRunnerPool().run(runnerFromRemote.getNoteId(),runnerFromRemote.getParagraphId());
      }
 else       if (event.getType() == RemoteInterpreterEventType.OUTPUT_APPEND) {
        Map<String,String> outputAppend=gson.fromJson(event.getData(),new TypeToken<Map<String,String>>(){
        }
.getType());
        String noteId=outputAppend.get("noteId");
        String paragraphId=outputAppend.get("paragraphId");
        String outputToAppend=outputAppend.get("data");
        listener.onOutputAppend(noteId,paragraphId,outputToAppend);
      }
 else       if (event.getType() == RemoteInterpreterEventType.OUTPUT_UPDATE) {
        Map<String,String> outputAppend=gson.fromJson(event.getData(),new TypeToken<Map<String,String>>(){
        }
.getType());
        String noteId=outputAppend.get("noteId");
        String paragraphId=outputAppend.get("paragraphId");
        String outputToUpdate=outputAppend.get("data");
        listener.onOutputUpdated(noteId,paragraphId,outputToUpdate);
      }
      logger.debug("Event from remoteproceess {}",event.getType());
    }
 catch (    Exception e) {
      logger.error("Can't handle event " + event,e);
    }
  }
}
