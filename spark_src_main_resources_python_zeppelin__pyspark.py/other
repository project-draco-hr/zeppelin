import sys, getopt, traceback, json, re
from py4j.java_gateway import java_import, JavaGateway, GatewayClient
from py4j.protocol import Py4JJavaError
from pyspark.conf import SparkConf
from pyspark.context import SparkContext
from pyspark.rdd import RDD
from pyspark.files import SparkFiles
from pyspark.storagelevel import StorageLevel
from pyspark.accumulators import Accumulator, AccumulatorParam
from pyspark.broadcast import Broadcast
from pyspark.serializers import MarshalSerializer, PickleSerializer
import ast
from pyspark.sql import SQLContext, HiveContext, Row
output = Logger()
sys.stdout = output
sys.stderr = output
client = GatewayClient(port=int(sys.argv[1]))
sparkVersion = SparkVersion(int(sys.argv[2]))
if sparkVersion.isSpark2():
    from pyspark.sql import SparkSession
else:
    from pyspark.sql import SchemaRDD
if sparkVersion.isAutoConvertEnabled():
    gateway = JavaGateway(client, auto_convert=True)
else:
    gateway = JavaGateway(client)
java_import(gateway.jvm, 'org.apache.spark.SparkEnv')
java_import(gateway.jvm, 'org.apache.spark.SparkConf')
java_import(gateway.jvm, 'org.apache.spark.api.java.*')
java_import(gateway.jvm, 'org.apache.spark.api.python.*')
java_import(gateway.jvm, 'org.apache.spark.mllib.api.python.*')
intp = gateway.entry_point
intp.onPythonScriptInitialized()
jsc = intp.getJavaSparkContext()
if sparkVersion.isImportAllPackageUnderSparkSql():
    java_import(gateway.jvm, 'org.apache.spark.sql.*')
    java_import(gateway.jvm, 'org.apache.spark.sql.hive.*')
else:
    java_import(gateway.jvm, 'org.apache.spark.sql.SQLContext')
    java_import(gateway.jvm, 'org.apache.spark.sql.hive.HiveContext')
    java_import(gateway.jvm, 'org.apache.spark.sql.hive.LocalHiveContext')
    java_import(gateway.jvm, 'org.apache.spark.sql.hive.TestHiveContext')
java_import(gateway.jvm, 'scala.Tuple2')
jconf = intp.getSparkConf()
conf = SparkConf(_jvm=gateway.jvm, _jconf=jconf)
sc = SparkContext(jsc=jsc, gateway=gateway, conf=conf)
sqlc = SQLContext(sc, intp.getSQLContext())
sqlContext = sqlc
if sparkVersion.isSpark2():
    spark = SparkSession(sc, intp.getSparkSession())
completion = PySparkCompletion(intp)
z = PyZeppelinContext(intp.getZeppelinContext())
while True:
    req = intp.getStatements()
    try:
        stmts = req.statements().split('\n')
        jobGroup = req.jobGroup()
        final_code = []
        for s in stmts:
            if (s == None):
                continue
            s_stripped = s.strip()
            if ((len(s_stripped) == 0) or s_stripped.startswith('#')):
                continue
            final_code.append(s)
        if final_code:
            sc.setJobGroup(jobGroup, 'Zeppelin')
            code = compile('\n'.join(final_code), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)
            (to_run_exec, to_run_single) = (code.body[:(-1)], code.body[(-1):])
            try:
                for node in to_run_exec:
                    mod = ast.Module([node])
                    code = compile(mod, '<stdin>', 'exec')
                    exec code
                for node in to_run_single:
                    mod = ast.Interactive([node])
                    code = compile(mod, '<stdin>', 'single')
                    exec code
            except:
                raise Execution(sys.exc_info())
        intp.setStatementsFinished('', False)
    except Py4JJavaError:
        excInnerError = traceback.format_exc()
        innerErrorStart = excInnerError.find('Py4JJavaError:')
        if (innerErrorStart > (-1)):
            excInnerError = excInnerError[innerErrorStart:]
        intp.setStatementsFinished((excInnerError + str(sys.exc_info())), True)
    except:
        intp.setStatementsFinished(traceback.format_exc(), True)
    output.reset()
