{
  File testzanrepo=new File(tmpDir.getAbsolutePath() + "/local/zanrepo/libname");
  FileRepositoryBuilder builder=new FileRepositoryBuilder();
  FileRepository repo=builder.setGitDir(new File(testzanrepo,".git")).build();
  repo.create();
  repo.close();
  System.out.println(testzanrepo.toString());
  Git git=Git.open(testzanrepo);
  stringToFile(testzanrepo.getAbsolutePath() + "/file","Hello world");
  git.add().addFilepattern("file").call();
  RevCommit rc=git.commit().setMessage("initial commit").call();
  git.push();
  String localBase=tmpDir.getAbsolutePath() + "/local";
  String remoteBase=tmpDir.getAbsolutePath() + "/remote";
  ZAN zan=new ZAN(localBase,remoteBase,dfs);
  zan.install("libname","file://" + tmpDir.getAbsolutePath() + "/local/zanrepo/libname","master",rc.getId().getName(),null);
  assertTrue(new File(localBase + "/libname/file").isFile());
  assertTrue(new File(remoteBase + "/libname/file").isFile());
  git=Git.open(testzanrepo);
  stringToFile(testzanrepo.getAbsolutePath() + "/file1","new file");
  git.add().addFilepattern("file1").call();
  rc=git.commit().setMessage("add file").call();
  git.push();
  zan.upgrade("libname","master",rc.getId().getName(),null);
  assertTrue(new File(localBase + "/libname/file1").isFile());
  assertTrue(new File(remoteBase + "/libname/file1").isFile());
  zan.delete("libname");
  assertFalse(new File(localBase + "/libname").exists());
  assertFalse(new File(remoteBase + "/libname").exists());
}
