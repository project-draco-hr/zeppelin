{
  String[] cmdArray;
  String[] patterns;
  assert(qMap.containsKey(tname));
  String outFileName=outPath(outDir,tname + ".out");
  patterns=new String[]{".*file:.*",".*pfile:.*",".*hdfs:.*",".*/tmp/.*",".*invalidscheme:.*",".*lastUpdateTime.*",".*lastAccessTime.*",".*lastModifiedTime.*",".*[Oo]wner.*",".*CreateTime.*",".*LastAccessTime.*",".*Location.*",".*LOCATION '.*",".*transient_lastDdlTime.*",".*last_modified_.*",".*java.lang.RuntimeException.*",".*at org.*",".*at sun.*",".*at java.*",".*at junit.*",".*Caused by:.*",".*LOCK_QUERYID:.*",".*LOCK_TIME:.*",".*grantTime.*",".*[.][.][.] [0-9]* more.*",".*job_[0-9]*_[0-9]*.*",".*USING 'java -cp.*","^Deleted.*"};
  File f=new File(logDir,tname + ".out");
  maskPatterns(patterns,f.getPath());
  cmdArray=new String[]{"diff","-a",f.getPath(),outFileName};
  System.out.println(org.apache.commons.lang.StringUtils.join(cmdArray,' '));
  Process executor=Runtime.getRuntime().exec(cmdArray);
  StreamPrinter outPrinter=new StreamPrinter(executor.getInputStream(),null,SessionState.getConsole().getChildOutStream());
  StreamPrinter errPrinter=new StreamPrinter(executor.getErrorStream(),null,SessionState.getConsole().getChildErrStream());
  outPrinter.start();
  errPrinter.start();
  int exitVal=executor.waitFor();
  if (exitVal != 0 && overWrite) {
    System.out.println("Overwriting results");
    cmdArray=new String[3];
    cmdArray[0]="cp";
    cmdArray[1]=f.getPath();
    cmdArray[2]=outFileName;
    executor=Runtime.getRuntime().exec(cmdArray);
    exitVal=executor.waitFor();
  }
  return exitVal;
}
