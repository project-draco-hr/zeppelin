{
  Object[] rows=null;
  Method take;
  String jobGroup="zeppelin-" + interpreterContext.getParagraphId();
  sc.setJobGroup(jobGroup,"Zeppelin",false);
  try {
    take=df.getClass().getMethod("take",int.class);
    rows=(Object[])take.invoke(df,maxResult + 1);
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|ClassCastException e) {
    sc.clearJobGroup();
    throw new InterpreterException(e);
  }
  List<Attribute> columns=null;
  try {
    Object qe=df.getClass().getMethod("queryExecution").invoke(df);
    Object a=qe.getClass().getMethod("analyzed").invoke(qe);
    scala.collection.Seq seq=(scala.collection.Seq)a.getClass().getMethod("output").invoke(a);
    columns=(List<Attribute>)scala.collection.JavaConverters.seqAsJavaListConverter(seq).asJava();
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    throw new InterpreterException(e);
  }
  String msg=null;
  for (  Attribute col : columns) {
    if (msg == null) {
      msg=col.name();
    }
 else {
      msg+="\t" + col.name();
    }
  }
  msg+="\n";
  try {
    for (int r=0; r < maxResult && r < rows.length; r++) {
      Object row=rows[r];
      Method isNullAt=row.getClass().getMethod("isNullAt",int.class);
      Method apply=row.getClass().getMethod("apply",int.class);
      for (int i=0; i < columns.size(); i++) {
        if (!(Boolean)isNullAt.invoke(row,i)) {
          msg+=apply.invoke(row,i).toString();
        }
 else {
          msg+="null";
        }
        if (i != columns.size() - 1) {
          msg+="\t";
        }
      }
      msg+="\n";
    }
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    throw new InterpreterException(e);
  }
  if (rows.length > maxResult) {
    msg+="\n<font color=red>Results are limited by " + maxResult + ".</font>";
  }
  sc.clearJobGroup();
  return "%table " + msg;
}
