{
  try {
    String[] lines=stringLines.split("\n");
    String[] linesToRun=new String[lines.length + 1];
    for (int i=0; i < lines.length; i++) {
      linesToRun[i]=lines[i];
    }
    linesToRun[lines.length]="print(\"\")";
    out.setInterpreterOutput(context.out);
    context.out.clear();
    Code r=null;
    String incomplete="";
    boolean inComment=false;
    for (int l=0; l < linesToRun.length; l++) {
      String s=linesToRun[l];
      if (l + 1 < linesToRun.length) {
        String nextLine=linesToRun[l + 1].trim();
        boolean continuation=false;
        if (nextLine.isEmpty() || nextLine.startsWith("//") || nextLine.startsWith("}")|| nextLine.startsWith("object")) {
          continuation=true;
        }
 else         if (!inComment && nextLine.startsWith("/*")) {
          inComment=true;
          continuation=true;
        }
 else         if (inComment && nextLine.lastIndexOf("*/") >= 0) {
          inComment=false;
          continuation=true;
        }
 else         if (nextLine.length() > 1 && nextLine.charAt(0) == '.' && nextLine.charAt(1) != '.' && nextLine.charAt(1) != '/') {
          continuation=true;
        }
 else         if (inComment) {
          continuation=true;
        }
        if (continuation) {
          incomplete+=s + "\n";
          continue;
        }
      }
      InterpreterResult res;
      try {
        res=interpret(incomplete + s,context,userSessionMap);
      }
 catch (      Exception e) {
        LOGGER.error("Interpreter exception",e);
        return new InterpreterResult(Code.ERROR,InterpreterUtils.getMostRelevantMessage(e));
      }
      r=res.code();
      if (r == Code.ERROR) {
        out.setInterpreterOutput(null);
        return res;
      }
 else       if (r == Code.INCOMPLETE) {
        incomplete+=s + "\n";
      }
 else {
        out.write((res.message() + "\n").getBytes(Charset.forName("UTF-8")));
        incomplete="";
      }
    }
    if (r == Code.INCOMPLETE) {
      out.setInterpreterOutput(null);
      return new InterpreterResult(r,"Incomplete expression");
    }
 else {
      out.setInterpreterOutput(null);
      return new InterpreterResult(Code.SUCCESS);
    }
  }
 catch (  Exception e) {
    LOGGER.error("error in interpretInput",e);
    return new InterpreterResult(Code.ERROR,e.getMessage());
  }
}
