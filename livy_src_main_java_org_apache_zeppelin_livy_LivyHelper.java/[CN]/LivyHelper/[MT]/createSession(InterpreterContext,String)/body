{
  try {
    Map<String,String> conf=new HashMap<String,String>();
    Iterator<Entry<Object,Object>> it=property.entrySet().iterator();
    while (it.hasNext()) {
      Entry<Object,Object> pair=it.next();
      if (pair.getKey().toString().startsWith("livy.spark.") && !pair.getValue().toString().isEmpty())       conf.put(pair.getKey().toString().substring(5),pair.getValue().toString());
    }
    String confData=gson.toJson(conf);
    String user=context.getAuthenticationInfo().getUser();
    String json=executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions","POST","{" + "\"kind\": \"" + kind + "\", "+ "\"conf\": "+ confData+ ", "+ "\"proxyUser\": "+ (StringUtils.isEmpty(user) ? null : "\"" + user + "\"")+ "}",context.getParagraphId());
    Map jsonMap=(Map<Object,Object>)gson.fromJson(json,new TypeToken<Map<Object,Object>>(){
    }
.getType());
    Integer sessionId=((Double)jsonMap.get("id")).intValue();
    if (!jsonMap.get("state").equals("idle")) {
      Integer retryCount=60;
      try {
        retryCount=Integer.valueOf(property.getProperty("zeppelin.livy.create.session.retries"));
      }
 catch (      Exception e) {
        LOGGER.info("zeppelin.livy.create.session.retries property is not configured." + " Using default retry count.");
      }
      while (retryCount >= 0) {
        LOGGER.error(String.format("sessionId:%s state is %s",jsonMap.get("id"),jsonMap.get("state")));
        Thread.sleep(1000);
        json=executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions/" + sessionId,"GET",null,context.getParagraphId());
        jsonMap=(Map<Object,Object>)gson.fromJson(json,new TypeToken<Map<Object,Object>>(){
        }
.getType());
        if (jsonMap.get("state").equals("idle")) {
          break;
        }
 else         if (jsonMap.get("state").equals("error") || jsonMap.get("state").equals("dead")) {
          json=executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions/" + sessionId+ "/log","GET",null,context.getParagraphId());
          jsonMap=(Map<Object,Object>)gson.fromJson(json,new TypeToken<Map<Object,Object>>(){
          }
.getType());
          String logs=StringUtils.join((ArrayList<String>)jsonMap.get("log"),'\n');
          LOGGER.error(String.format("Cannot start  %s.\n%s",kind,logs));
          throw new Exception(String.format("Cannot start  %s.\n%s",kind,logs));
        }
        retryCount--;
      }
      if (retryCount <= 0) {
        LOGGER.error("Error getting session for user within the configured number of retries.");
        throw new Exception(String.format("Cannot start  %s.",kind));
      }
    }
    return sessionId;
  }
 catch (  Exception e) {
    LOGGER.error("Error getting session for user",e);
    throw e;
  }
}
