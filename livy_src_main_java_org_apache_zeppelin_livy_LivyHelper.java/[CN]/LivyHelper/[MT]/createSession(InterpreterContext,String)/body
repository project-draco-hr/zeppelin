{
  try {
    String json=executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions","POST","{" + "\"kind\": \"" + kind + "\", "+ "\"master\": \""+ property.getProperty("zeppelin.livy.master")+ "\", "+ "\"proxyUser\": \""+ context.getAuthenticationInfo().getUser()+ "\""+ "}",context.getParagraphId());
    if (json.contains("CreateInteractiveRequest[\\\"master\\\"]")) {
      json=executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions","POST","{" + "\"kind\": \"" + kind + "\", "+ "\"conf\":{\"spark.master\": \""+ property.getProperty("zeppelin.livy.master")+ "\"},"+ "\"proxyUser\": \""+ context.getAuthenticationInfo().getUser()+ "\""+ "}",context.getParagraphId());
    }
    Map jsonMap=(Map<Object,Object>)gson.fromJson(json,new TypeToken<Map<Object,Object>>(){
    }
.getType());
    Integer sessionId=((Double)jsonMap.get("id")).intValue();
    if (!jsonMap.get("state").equals("idle")) {
      Integer nosRetry=MAX_NOS_RETRY;
      while (nosRetry >= 0) {
        LOGGER.error(String.format("sessionId:%s state is %s",jsonMap.get("id"),jsonMap.get("state")));
        Thread.sleep(1000);
        json=executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions/" + sessionId,"GET",null,context.getParagraphId());
        jsonMap=(Map<Object,Object>)gson.fromJson(json,new TypeToken<Map<Object,Object>>(){
        }
.getType());
        if (jsonMap.get("state").equals("idle")) {
          break;
        }
 else         if (jsonMap.get("state").equals("error")) {
          json=executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions/" + sessionId+ "/log","GET",null,context.getParagraphId());
          jsonMap=(Map<Object,Object>)gson.fromJson(json,new TypeToken<Map<Object,Object>>(){
          }
.getType());
          String logs=StringUtils.join((ArrayList<String>)jsonMap.get("log"),'\n');
          LOGGER.error(String.format("Cannot start  %s.\n%s",kind,logs));
          throw new Exception(String.format("Cannot start  %s.\n%s",kind,logs));
        }
        nosRetry--;
      }
      if (nosRetry <= 0) {
        LOGGER.error("Error getting session for user within 60Sec.");
        throw new Exception(String.format("Cannot start  %s.",kind));
      }
    }
    return sessionId;
  }
 catch (  Exception e) {
    LOGGER.error("Error getting session for user",e);
    throw e;
  }
}
