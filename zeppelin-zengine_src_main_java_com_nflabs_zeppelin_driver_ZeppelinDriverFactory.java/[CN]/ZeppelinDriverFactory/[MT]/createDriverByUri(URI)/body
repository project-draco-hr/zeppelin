{
  String driverName=uri.getScheme();
  URI driverUri;
  try {
    driverUri=new URI(uri.getSchemeSpecificPart());
  }
 catch (  URISyntaxException e1) {
    throw new ZeppelinDriverException(e1);
  }
  String driverClassName=driverUri.getScheme();
  URLClassLoader cl=classLoaders.get(driverName);
  if (cl == null) {
    throw new ZeppelinDriverException("Can not find driver " + driverName);
  }
  Class cls;
  ClassLoader oldcl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(cl);
    cls=cl.loadClass(driverClassName);
    Constructor<ZeppelinDriver> constructor=cls.getConstructor(new Class[]{ZeppelinConfiguration.class,URI.class,URLClassLoader.class});
    URI connectionUri=new URI(driverUri.getSchemeSpecificPart());
    if (logger.isDebugEnabled()) {
      logger.debug("Create driver " + driverClassName + "("+ connectionUri.toString()+ ")");
    }
    return constructor.newInstance(conf,connectionUri,cl);
  }
 catch (  ClassNotFoundException e) {
    throw new ZeppelinDriverException(e);
  }
catch (  IllegalArgumentException e) {
    throw new ZeppelinDriverException(e);
  }
catch (  InstantiationException e) {
    throw new ZeppelinDriverException(e);
  }
catch (  IllegalAccessException e) {
    throw new ZeppelinDriverException(e);
  }
catch (  InvocationTargetException e) {
    throw new ZeppelinDriverException(e);
  }
catch (  SecurityException e) {
    throw new ZeppelinDriverException(e);
  }
catch (  NoSuchMethodException e) {
    throw new ZeppelinDriverException(e);
  }
catch (  URISyntaxException e) {
    throw new ZeppelinDriverException(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldcl);
  }
}
