{
  System.err.println("------ Create new SparkContext " + getProperty("master") + " -------");
  String execUri=System.getenv("SPARK_EXECUTOR_URI");
  String[] jars=SparkILoop.getAddedJars();
  String classServerUri=null;
  try {
    Method classServer=interpreter.intp().getClass().getMethod("classServer");
    HttpServer httpServer=(HttpServer)classServer.invoke(interpreter.intp());
    classServerUri=httpServer.uri();
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
  }
  if (classServerUri == null) {
    try {
      Method classServer=interpreter.intp().getClass().getMethod("classServerUri");
      classServerUri=(String)classServer.invoke(interpreter.intp());
    }
 catch (    NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
      throw new InterpreterException(e);
    }
  }
  SparkConf conf=new SparkConf().setMaster(getProperty("master")).setAppName(getProperty("spark.app.name")).set("spark.repl.class.uri",classServerUri);
  if (jars.length > 0) {
    conf.setJars(jars);
  }
  if (execUri != null) {
    conf.set("spark.executor.uri",execUri);
  }
  if (System.getenv("SPARK_HOME") != null) {
    conf.setSparkHome(System.getenv("SPARK_HOME"));
  }
  conf.set("spark.scheduler.mode","FAIR");
  Properties intpProperty=getProperty();
  for (  Object k : intpProperty.keySet()) {
    String key=(String)k;
    String val=toString(intpProperty.get(key));
    if (!key.startsWith("spark.") || !val.trim().isEmpty()) {
      logger.debug(String.format("SparkConf: key = [%s], value = [%s]",key,val));
      conf.set(key,val);
    }
  }
  SparkContext sparkContext=new SparkContext(conf);
  return sparkContext;
}
