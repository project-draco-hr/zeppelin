{
  int numTasks=(int)stage.getClass().getMethod("numTasks").invoke(stage);
  int completedTasks=0;
  int id=(int)stage.getClass().getMethod("id").invoke(stage);
  try {
    Method stageIdToData=sparkListener.getClass().getMethod("stageIdToData");
    HashMap<Tuple2<Object,Object>,Object> stageIdData=(HashMap<Tuple2<Object,Object>,Object>)stageIdToData.invoke(sparkListener);
    Class<?> stageUIDataClass=this.getClass().forName("org.apache.spark.ui.jobs.UIData$StageUIData");
    Method numCompletedTasks=stageUIDataClass.getMethod("numCompleteTasks");
    Set<Tuple2<Object,Object>> keys=JavaConverters.setAsJavaSetConverter(stageIdData.keySet()).asJava();
    for (    Tuple2<Object,Object> k : keys) {
      if (id == (int)k._1()) {
        Object uiData=stageIdData.get(k).get();
        completedTasks+=(int)numCompletedTasks.invoke(uiData);
      }
    }
  }
 catch (  Exception e) {
    logger.error("Error on getting progress information",e);
  }
  List<Object> parents=JavaConversions.seqAsJavaList((Seq<Object>)stage.getClass().getMethod("parents").invoke(stage));
  if (parents != null) {
    for (    Object s : parents) {
      int[] p=getProgressFromStage_1_1x(sparkListener,s);
      numTasks+=p[0];
      completedTasks+=p[1];
    }
  }
  return new int[]{numTasks,completedTasks};
}
