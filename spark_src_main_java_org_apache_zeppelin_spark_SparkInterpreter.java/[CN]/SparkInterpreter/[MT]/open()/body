{
  URL[] urls=getClassloaderUrls();
  Settings settings=new Settings();
  if (getProperty("args") != null) {
    String[] argsArray=getProperty("args").split(" ");
    LinkedList<String> argList=new LinkedList<String>();
    for (    String arg : argsArray) {
      argList.add(arg);
    }
    SparkCommandLine command=new SparkCommandLine(scala.collection.JavaConversions.asScalaBuffer(argList).toList());
    settings=command.settings();
  }
  PathSetting pathSettings=settings.classpath();
  String classpath="";
  List<File> paths=currentClassPath();
  for (  File f : paths) {
    if (classpath.length() > 0) {
      classpath+=File.pathSeparator;
    }
    classpath+=f.getAbsolutePath();
  }
  if (urls != null) {
    for (    URL u : urls) {
      if (classpath.length() > 0) {
        classpath+=File.pathSeparator;
      }
      classpath+=u.getFile();
    }
  }
  DepInterpreter depInterpreter=getDepInterpreter();
  if (depInterpreter != null) {
    SparkDependencyContext depc=depInterpreter.getDependencyContext();
    if (depc != null) {
      List<File> files=depc.getFiles();
      if (files != null) {
        for (        File f : files) {
          if (classpath.length() > 0) {
            classpath+=File.pathSeparator;
          }
          classpath+=f.getAbsolutePath();
        }
      }
    }
  }
  String localRepo=getProperty("zeppelin.interpreter.localRepo");
  if (localRepo != null) {
    File localRepoDir=new File(localRepo);
    if (localRepoDir.exists()) {
      File[] files=localRepoDir.listFiles();
      if (files != null) {
        for (        File f : files) {
          if (classpath.length() > 0) {
            classpath+=File.pathSeparator;
          }
          classpath+=f.getAbsolutePath();
        }
      }
    }
  }
  pathSettings.v_$eq(classpath);
  settings.scala$tools$nsc$settings$ScalaSettings$_setter_$classpath_$eq(pathSettings);
  settings.explicitParentLoader_$eq(new Some<ClassLoader>(Thread.currentThread().getContextClassLoader()));
  BooleanSetting b=(BooleanSetting)settings.usejavacp();
  b.v_$eq(true);
  settings.scala$tools$nsc$settings$StandardScalaSettings$_setter_$usejavacp_$eq(b);
  System.setProperty("scala.repl.name.line","line" + this.hashCode() + "$");
  MutableSettings.IntSetting numClassFileSetting=settings.maxClassfileName();
  numClassFileSetting.v_$eq(128);
  settings.scala$tools$nsc$settings$ScalaSettings$_setter_$maxClassfileName_$eq(numClassFileSetting);
synchronized (sharedInterpreterLock) {
    if (printREPLOutput()) {
      this.interpreter=new SparkILoop(null,new PrintWriter(out));
    }
 else {
      this.interpreter=new SparkILoop(null,new PrintWriter(Console.out(),false));
    }
    interpreter.settings_$eq(settings);
    interpreter.createInterpreter();
    intp=interpreter.intp();
    intp.setContextClassLoader();
    intp.initializeSynchronous();
    if (classOutputDir == null) {
      classOutputDir=settings.outputDirs().getSingleOutput().get();
    }
 else {
      settings.outputDirs().setSingleOutput(classOutputDir);
      ClassLoader cl=intp.classLoader();
      try {
        Field rootField=cl.getClass().getSuperclass().getDeclaredField("root");
        rootField.setAccessible(true);
        rootField.set(cl,classOutputDir);
      }
 catch (      NoSuchFieldException|IllegalAccessException e) {
        logger.error(e.getMessage(),e);
      }
    }
    completor=new SparkJLineCompletion(intp);
    sc=getSparkContext();
    if (sc.getPoolForName("fair").isEmpty()) {
      Value schedulingMode=org.apache.spark.scheduler.SchedulingMode.FAIR();
      int minimumShare=0;
      int weight=1;
      Pool pool=new Pool("fair",schedulingMode,minimumShare,weight);
      sc.taskScheduler().rootPool().addSchedulable(pool);
    }
    sparkVersion=SparkVersion.fromVersionString(sc.version());
    sqlc=getSQLContext();
    dep=getDependencyResolver();
    z=new ZeppelinContext(sc,sqlc,null,dep,Integer.parseInt(getProperty("zeppelin.spark.maxResult")));
    intp.interpret("@transient var _binder = new java.util.HashMap[String, Object]()");
    binder=(Map<String,Object>)getValue("_binder");
    binder.put("sc",sc);
    binder.put("sqlc",sqlc);
    binder.put("z",z);
    binder.put("intp",intp);
    intp.interpret("@transient val intp = _binder.get(\"intp\").asInstanceOf[org.apache.spark" + ".repl.SparkIMain]");
    intp.interpret("@transient val z = " + "_binder.get(\"z\").asInstanceOf[org.apache.zeppelin.spark.ZeppelinContext]");
    intp.interpret("@transient val sc = " + "_binder.get(\"sc\").asInstanceOf[org.apache.spark.SparkContext]");
    intp.interpret("@transient val sqlc = " + "_binder.get(\"sqlc\").asInstanceOf[org.apache.spark.sql.SQLContext]");
    intp.interpret("@transient val sqlContext = " + "_binder.get(\"sqlc\").asInstanceOf[org.apache.spark.sql.SQLContext]");
    intp.interpret("import org.apache.spark.SparkContext._");
    if (importImplicit()) {
      if (sparkVersion.oldSqlContextImplicits()) {
        intp.interpret("import sqlContext._");
      }
 else {
        intp.interpret("import sqlContext.implicits._");
        intp.interpret("import sqlContext.sql");
        intp.interpret("import org.apache.spark.sql.functions._");
      }
    }
  }
  try {
    if (sparkVersion.oldLoadFilesMethodName()) {
      Method loadFiles=this.interpreter.getClass().getMethod("loadFiles",Settings.class);
      loadFiles.invoke(this.interpreter,settings);
    }
 else {
      Method loadFiles=this.interpreter.getClass().getMethod("org$apache$spark$repl$SparkILoop$$loadFiles",Settings.class);
      loadFiles.invoke(this.interpreter,settings);
    }
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    throw new InterpreterException(e);
  }
  if (depInterpreter != null) {
    SparkDependencyContext depc=depInterpreter.getDependencyContext();
    if (depc != null) {
      List<File> files=depc.getFilesDist();
      if (files != null) {
        for (        File f : files) {
          if (f.getName().toLowerCase().endsWith(".jar")) {
            sc.addJar(f.getAbsolutePath());
            logger.info("sc.addJar(" + f.getAbsolutePath() + ")");
          }
 else {
            sc.addFile(f.getAbsolutePath());
            logger.info("sc.addFile(" + f.getAbsolutePath() + ")");
          }
        }
      }
    }
  }
  if (localRepo != null) {
    File localRepoDir=new File(localRepo);
    if (localRepoDir.exists()) {
      File[] files=localRepoDir.listFiles();
      if (files != null) {
        for (        File f : files) {
          if (f.getName().toLowerCase().endsWith(".jar")) {
            sc.addJar(f.getAbsolutePath());
            logger.info("sc.addJar(" + f.getAbsolutePath() + ")");
          }
 else {
            sc.addFile(f.getAbsolutePath());
            logger.info("sc.addFile(" + f.getAbsolutePath() + ")");
          }
        }
      }
    }
  }
  numReferenceOfSparkContext.incrementAndGet();
}
