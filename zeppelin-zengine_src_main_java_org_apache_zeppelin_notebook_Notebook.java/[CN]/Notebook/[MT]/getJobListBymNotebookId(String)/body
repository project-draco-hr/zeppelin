{
  final String CRON_TYPE_NOTEBOOK_KEYWORD="cron";
  long lastRunningUnixTime=0;
  boolean isNotebookRunning=false;
  Note jobNote=getNote(notebookID);
  List<Map<String,Object>> notesInfo=new LinkedList<>();
  if (jobNote == null) {
    return notesInfo;
  }
  Map<String,Object> info=new HashMap<>();
  info.put("notebookId",jobNote.getId());
  String notebookName=jobNote.getName();
  if (notebookName != null && !notebookName.equals("")) {
    info.put("notebookName",jobNote.getName());
  }
 else {
    info.put("notebookName","Note " + jobNote.getId());
  }
  if (jobNote.getConfig().containsKey(CRON_TYPE_NOTEBOOK_KEYWORD) && !jobNote.getConfig().get(CRON_TYPE_NOTEBOOK_KEYWORD).equals("")) {
    info.put("notebookType","cron");
  }
 else {
    info.put("notebookType","normal");
  }
  List<Map<String,Object>> paragraphsInfo=new LinkedList<>();
  for (  Paragraph paragraph : jobNote.getParagraphs()) {
    if (paragraph.getStatus().isRunning()) {
      isNotebookRunning=true;
    }
    Map<String,Object> paragraphItem=getParagraphForJobManagerItem(paragraph);
    lastRunningUnixTime=getUnixTimeLastRunParagraph(paragraph);
    paragraphsInfo.add(paragraphItem);
  }
  String interpreterGroupName=null;
  if (replFactory.getInterpreterSettings(jobNote.getId()) != null && replFactory.getInterpreterSettings(jobNote.getId()).size() >= 1) {
    interpreterGroupName=replFactory.getInterpreterSettings(jobNote.getId()).get(0).getName();
  }
  info.put("interpreter",interpreterGroupName);
  info.put("isRunningJob",isNotebookRunning);
  info.put("unixTimeLastRun",lastRunningUnixTime);
  info.put("paragraphs",paragraphsInfo);
  notesInfo.add(info);
  return notesInfo;
}
