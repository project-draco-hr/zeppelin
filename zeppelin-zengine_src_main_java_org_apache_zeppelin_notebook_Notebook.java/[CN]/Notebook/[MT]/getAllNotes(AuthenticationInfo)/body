{
  final Set<String> entities=Sets.newHashSet();
  if (subject != null) {
    entities.add(subject.getUser());
  }
synchronized (notes) {
    return FluentIterable.from(notes.values()).filter(new Predicate<Note>(){
      @Override public boolean apply(      Note input){
        return input != null && notebookAuthorization.isReader(input.getId(),entities);
      }
    }
).toSortedList(new Comparator<Note>(){
      @Override public int compare(      Note note1,      Note note2){
        String name1=note1.getId();
        if (note1.getName() != null) {
          name1=note1.getName();
        }
        String name2=note2.getId();
        if (note2.getName() != null) {
          name2=note2.getName();
        }
        return name1.compareTo(name2);
      }
    }
);
  }
}
