{
  removeCron(id);
synchronized (notes) {
    Note note=notes.get(id);
    if (note == null) {
      return;
    }
    Map<String,Object> config=note.getConfig();
    if (config == null) {
      return;
    }
    String cronExpr=(String)note.getConfig().get("cron");
    if (cronExpr == null || cronExpr.trim().length() == 0) {
      return;
    }
    JobDetail newJob=JobBuilder.newJob(CronJob.class).withIdentity(id,"note").usingJobData("noteId",id).build();
    Map<String,Object> info=note.getInfo();
    info.put("cron",null);
    CronTrigger trigger=null;
    try {
      trigger=TriggerBuilder.newTrigger().withIdentity("trigger_" + id,"note").withSchedule(CronScheduleBuilder.cronSchedule(cronExpr)).forJob(id,"note").build();
    }
 catch (    Exception e) {
      logger.error("Error",e);
      info.put("cron",e.getMessage());
    }
    try {
      if (trigger != null) {
        quartzSched.scheduleJob(newJob,trigger);
      }
    }
 catch (    SchedulerException e) {
      logger.error("Error",e);
      info.put("cron","Scheduler Exception");
    }
  }
}
