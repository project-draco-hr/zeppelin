{
  Connection connection=null;
  if (propertyKey == null || propertiesMap.get(propertyKey) == null) {
    return null;
  }
  if (null == connection) {
    final Properties properties=(Properties)propertiesMap.get(propertyKey).clone();
    logger.info(properties.getProperty(DRIVER_KEY));
    Class.forName(properties.getProperty(DRIVER_KEY));
    final String url=properties.getProperty(URL_KEY);
    if (StringUtils.isEmpty(property.getProperty("zeppelin.jdbc.auth.type"))) {
      connection=DriverManager.getConnection(url,properties);
    }
 else {
      UserGroupInformation.AuthenticationMethod authType=JDBCSecurityImpl.getAuthtype(property);
switch (authType) {
case KERBEROS:
        if (user == null) {
          connection=getConnectionFromPool(url,propertyKey,properties);
        }
 else {
          if ("hive".equalsIgnoreCase(propertyKey)) {
            connection=getConnectionFromPool(url + ";hive.server2.proxy.user=" + user,propertyKey,properties);
          }
 else {
            UserGroupInformation ugi=null;
            try {
              ugi=UserGroupInformation.createProxyUser(user,UserGroupInformation.getCurrentUser());
            }
 catch (            Exception e) {
              logger.error("Error in createProxyUser",e);
              StringBuilder stringBuilder=new StringBuilder();
              stringBuilder.append(e.getMessage()).append("\n");
              stringBuilder.append(e.getCause());
              throw new InterpreterException(stringBuilder.toString());
            }
            final String poolKey=propertyKey;
            try {
              connection=ugi.doAs(new PrivilegedExceptionAction<Connection>(){
                @Override public Connection run() throws Exception {
                  return getConnectionFromPool(url,poolKey,properties);
                }
              }
);
            }
 catch (            Exception e) {
              logger.error("Error in doAs",e);
              StringBuilder stringBuilder=new StringBuilder();
              stringBuilder.append(e.getMessage()).append("\n");
              stringBuilder.append(e.getCause());
              throw new InterpreterException(stringBuilder.toString());
            }
          }
        }
      break;
default :
    connection=getConnectionFromPool(url,propertyKey,properties);
}
}
}
propertyKeySqlCompleterMap.put(propertyKey,createSqlCompleter(connection));
return connection;
}
