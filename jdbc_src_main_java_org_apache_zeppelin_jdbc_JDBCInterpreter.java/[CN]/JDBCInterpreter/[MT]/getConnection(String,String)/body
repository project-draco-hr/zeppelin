{
  Connection connection=null;
  if (propertyKey == null || propertiesMap.get(propertyKey) == null) {
    return null;
  }
  if (propertyKeyUnusedConnectionListMap.containsKey(propertyKey)) {
    ArrayList<Connection> connectionList=propertyKeyUnusedConnectionListMap.get(propertyKey);
    if (0 != connectionList.size()) {
      connection=propertyKeyUnusedConnectionListMap.get(propertyKey).remove(0);
      if (null != connection && connection.isClosed()) {
        connection.close();
        connection=null;
      }
    }
  }
  if (null == connection) {
    final Properties properties=propertiesMap.get(propertyKey);
    logger.info(properties.getProperty(DRIVER_KEY));
    Class.forName(properties.getProperty(DRIVER_KEY));
    final String url=properties.getProperty(URL_KEY);
    UserGroupInformation.AuthenticationMethod authType=JDBCSecurityImpl.getAuthtype(property);
switch (authType) {
case KERBEROS:
      if (user == null) {
        connection=DriverManager.getConnection(url,properties);
      }
 else {
        if ("hive".equalsIgnoreCase(propertyKey)) {
          connection=DriverManager.getConnection(url + ";hive.server2.proxy.user=" + user,properties);
        }
 else {
          UserGroupInformation ugi=null;
          try {
            ugi=UserGroupInformation.createProxyUser(user,UserGroupInformation.getCurrentUser());
          }
 catch (          Exception e) {
            logger.error("Error in createProxyUser",e);
            StringBuilder stringBuilder=new StringBuilder();
            stringBuilder.append(e.getMessage()).append("\n");
            stringBuilder.append(e.getCause());
            throw new InterpreterException(stringBuilder.toString());
          }
          try {
            connection=ugi.doAs(new PrivilegedExceptionAction<Connection>(){
              @Override public Connection run() throws Exception {
                return DriverManager.getConnection(url,properties);
              }
            }
);
          }
 catch (          Exception e) {
            logger.error("Error in doAs",e);
            StringBuilder stringBuilder=new StringBuilder();
            stringBuilder.append(e.getMessage()).append("\n");
            stringBuilder.append(e.getCause());
            throw new InterpreterException(stringBuilder.toString());
          }
        }
      }
    break;
default :
  connection=DriverManager.getConnection(url,properties);
}
}
propertyKeySqlCompleterMap.put(propertyKey,createSqlCompleter(connection));
return connection;
}
