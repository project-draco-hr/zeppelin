{
  String paragraphId=interpreterContext.getParagraphId();
  Connection connection;
  Statement statement;
  ResultSet resultSet=null;
  try {
    connection=getConnection(propertyKey,interpreterContext.getAuthenticationInfo().getUser());
    if (connection == null) {
      return new InterpreterResult(Code.ERROR,"Prefix not found.");
    }
    statement=connection.createStatement();
    if (statement == null) {
      return new InterpreterResult(Code.ERROR,"Prefix not found.");
    }
    StringBuilder msg=null;
    boolean isTableType=false;
    if (containsIgnoreCase(sql,EXPLAIN_PREDICATE)) {
      msg=new StringBuilder();
    }
 else {
      msg=new StringBuilder(TABLE_MAGIC_TAG);
      isTableType=true;
    }
    try {
      saveStatement(paragraphId + interpreterContext.getAuthenticationInfo().getUser(),statement);
      boolean isResultSetAvailable=statement.execute(sql);
      if (isResultSetAvailable) {
        resultSet=statement.getResultSet();
        ResultSetMetaData md=resultSet.getMetaData();
        for (int i=1; i < md.getColumnCount() + 1; i++) {
          if (i > 1) {
            msg.append(TAB);
          }
          msg.append(replaceReservedChars(isTableType,md.getColumnName(i)));
        }
        msg.append(NEWLINE);
        int displayRowCount=0;
        while (resultSet.next() && displayRowCount < getMaxResult()) {
          for (int i=1; i < md.getColumnCount() + 1; i++) {
            Object resultObject;
            String resultValue;
            resultObject=resultSet.getObject(i);
            if (resultObject == null) {
              resultValue="null";
            }
 else {
              resultValue=resultSet.getString(i);
            }
            msg.append(replaceReservedChars(isTableType,resultValue));
            if (i != md.getColumnCount()) {
              msg.append(TAB);
            }
          }
          msg.append(NEWLINE);
          displayRowCount++;
        }
      }
 else {
        int updateCount=statement.getUpdateCount();
        msg.append(UPDATE_COUNT_HEADER).append(NEWLINE);
        msg.append(updateCount).append(NEWLINE);
      }
    }
  finally {
      if (resultSet != null) {
        try {
          resultSet.close();
        }
 catch (        SQLException e) {
        }
      }
      if (statement != null) {
        try {
          statement.close();
        }
 catch (        SQLException e) {
        }
      }
      if (connection != null) {
        try {
          connection.close();
        }
 catch (        SQLException e) {
        }
      }
      removeStatement(paragraphId + interpreterContext.getAuthenticationInfo().getUser());
    }
    return new InterpreterResult(Code.SUCCESS,msg.toString());
  }
 catch (  Exception e) {
    logger.error("Cannot run " + sql,e);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    e.printStackTrace(ps);
    String errorMsg=new String(baos.toByteArray(),StandardCharsets.UTF_8);
    return new InterpreterResult(Code.ERROR,errorMsg);
  }
}
