{
  String zpath=System.getProperty("java.io.tmpdir") + "/ZeppelinLTest_" + System.currentTimeMillis();
  mainZepDir=new File(zpath);
  mainZepDir.mkdirs();
  new File(mainZepDir,"conf").mkdirs();
  String mainNotePath=zpath + "/notebook";
  String secNotePath=mainNotePath + "_secondary";
  mainNotebookDir=new File(mainNotePath);
  secNotebookDir=new File(secNotePath);
  mainNotebookDir.mkdirs();
  secNotebookDir.mkdirs();
  System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(),mainZepDir.getAbsolutePath());
  System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(),mainNotebookDir.getAbsolutePath());
  System.setProperty(ConfVars.ZEPPELIN_INTERPRETERS.getVarName(),"org.apache.zeppelin.interpreter.mock.MockInterpreter1,org.apache.zeppelin.interpreter.mock.MockInterpreter2");
  System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_STORAGE.getVarName(),"org.apache.zeppelin.notebook.repo.VFSNotebookRepo,org.apache.zeppelin.notebook.repo.mock.VFSNotebookRepoMock");
  LOG.info("main Note dir : " + mainNotePath);
  LOG.info("secondary note dir : " + secNotePath);
  conf=ZeppelinConfiguration.create();
  this.schedulerFactory=new SchedulerFactory();
  MockInterpreter1.register("mock1","org.apache.zeppelin.interpreter.mock.MockInterpreter1");
  MockInterpreter2.register("mock2","org.apache.zeppelin.interpreter.mock.MockInterpreter2");
  depResolver=new DependencyResolver(mainZepDir.getAbsolutePath() + "/local-repo");
  factory=new InterpreterFactory(conf,new InterpreterOption(false),null,null,null,depResolver);
  search=mock(SearchService.class);
  notebookRepoSync=new NotebookRepoSync(conf);
  notebookAuthorization=new NotebookAuthorization(conf);
  credentials=new Credentials(conf.credentialsPersist(),conf.getCredentialsPath());
  notebookSync=new Notebook(conf,notebookRepoSync,schedulerFactory,factory,this,search,notebookAuthorization,credentials);
}
