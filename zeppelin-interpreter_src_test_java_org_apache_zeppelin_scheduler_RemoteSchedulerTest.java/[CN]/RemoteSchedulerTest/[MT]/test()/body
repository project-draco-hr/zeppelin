{
  Properties p=new Properties();
  final InterpreterGroup intpGroup=new InterpreterGroup();
  Map<String,String> env=new HashMap<String,String>();
  env.put("ZEPPELIN_CLASSPATH",new File("./target/test-classes").getAbsolutePath());
  final RemoteInterpreter intpA=new RemoteInterpreter(p,"note",MockInterpreterA.class.getName(),new File(INTERPRETER_SCRIPT).getAbsolutePath(),"fake","fakeRepo",env,10 * 1000,this);
  intpGroup.put("note",new LinkedList<Interpreter>());
  intpGroup.get("note").add(intpA);
  intpA.setInterpreterGroup(intpGroup);
  intpA.open();
  Scheduler scheduler=schedulerSvc.createOrGetRemoteScheduler("test","note",intpA.getInterpreterProcess(),10);
  Job job=new Job("jobId","jobName",null,200){
    @Override public int progress(){
      return 0;
    }
    @Override public Map<String,Object> info(){
      return null;
    }
    @Override protected Object jobRun() throws Throwable {
      intpA.interpret("1000",new InterpreterContext("note","jobId","title","text",new AuthenticationInfo(),new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LocalResourcePool("pool1"),new LinkedList<InterpreterContextRunner>(),null));
      return "1000";
    }
    @Override protected boolean jobAbort(){
      return false;
    }
  }
;
  scheduler.submit(job);
  int cycles=0;
  while (!job.isRunning() && cycles < MAX_WAIT_CYCLES) {
    Thread.sleep(TICK_WAIT);
    cycles++;
  }
  assertTrue(job.isRunning());
  Thread.sleep(5 * TICK_WAIT);
  assertEquals(0,scheduler.getJobsWaiting().size());
  assertEquals(1,scheduler.getJobsRunning().size());
  cycles=0;
  while (!job.isTerminated() && cycles < MAX_WAIT_CYCLES) {
    Thread.sleep(TICK_WAIT);
    cycles++;
  }
  assertTrue(job.isTerminated());
  assertEquals(0,scheduler.getJobsWaiting().size());
  assertEquals(0,scheduler.getJobsRunning().size());
  intpA.close();
  schedulerSvc.removeScheduler("test");
}
