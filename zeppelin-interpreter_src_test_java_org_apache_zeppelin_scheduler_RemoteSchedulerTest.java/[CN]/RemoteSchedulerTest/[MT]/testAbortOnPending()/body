{
  Properties p=new Properties();
  final InterpreterGroup intpGroup=new InterpreterGroup();
  Map<String,String> env=new HashMap<String,String>();
  env.put("ZEPPELIN_CLASSPATH",new File("./target/test-classes").getAbsolutePath());
  final RemoteInterpreter intpA=new RemoteInterpreter(p,"note",MockInterpreterA.class.getName(),new File(INTERPRETER_SCRIPT).getAbsolutePath(),"fake","fakeRepo",env,10 * 1000,this,null);
  intpGroup.put("note",new LinkedList<Interpreter>());
  intpGroup.get("note").add(intpA);
  intpA.setInterpreterGroup(intpGroup);
  intpA.open();
  Scheduler scheduler=schedulerSvc.createOrGetRemoteScheduler("test","note",intpA.getInterpreterProcess(),10);
  Job job1=new Job("jobId1","jobName1",null,200){
    InterpreterContext context=new InterpreterContext("note","jobId1","title","text",new AuthenticationInfo(),new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LocalResourcePool("pool1"),new LinkedList<InterpreterContextRunner>(),null);
    @Override public int progress(){
      return 0;
    }
    @Override public Map<String,Object> info(){
      return null;
    }
    @Override protected Object jobRun() throws Throwable {
      intpA.interpret("1000",context);
      return "1000";
    }
    @Override protected boolean jobAbort(){
      if (isRunning()) {
        intpA.cancel(context);
      }
      return true;
    }
  }
;
  Job job2=new Job("jobId2","jobName2",null,200){
    InterpreterContext context=new InterpreterContext("note","jobId2","title","text",new AuthenticationInfo(),new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LocalResourcePool("pool1"),new LinkedList<InterpreterContextRunner>(),null);
    @Override public int progress(){
      return 0;
    }
    @Override public Map<String,Object> info(){
      return null;
    }
    @Override protected Object jobRun() throws Throwable {
      intpA.interpret("1000",context);
      return "1000";
    }
    @Override protected boolean jobAbort(){
      if (isRunning()) {
        intpA.cancel(context);
      }
      return true;
    }
  }
;
  job2.setResult("result2");
  scheduler.submit(job1);
  scheduler.submit(job2);
  int cycles=0;
  while (!job1.isRunning() && cycles < MAX_WAIT_CYCLES) {
    Thread.sleep(TICK_WAIT);
    cycles++;
  }
  assertTrue(job1.isRunning());
  assertTrue(job2.getStatus() == Status.PENDING);
  job2.abort();
  cycles=0;
  while (!job1.isTerminated() && cycles < MAX_WAIT_CYCLES) {
    Thread.sleep(TICK_WAIT);
    cycles++;
  }
  assertNotNull(job1.getDateFinished());
  assertTrue(job1.isTerminated());
  assertNull(job2.getDateFinished());
  assertTrue(job2.isTerminated());
  assertEquals("result2",job2.getReturn());
  intpA.close();
  schedulerSvc.removeScheduler("test");
}
