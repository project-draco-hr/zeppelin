{
  StringBuilder sb=new StringBuilder();
  sb.append("Commands list:");
  sb.append("\n\t[help] - List all available commands.");
  sb.append("\n\t[cat <path>] - Prints the file's contents to the console.");
  sb.append("\n\t[chgrp [-R] <group> <path>] - Changes the group of a file or directory " + "specified by args. Specify -R to change the group recursively.");
  sb.append("\n\t[chmod -R <mode> <path>] - Changes the permission of a file or directory " + "specified by args. Specify -R to change the permission recursively.");
  sb.append("\n\t[chown -R <owner> <path>] - Changes the owner of a file or directory " + "specified by args. Specify -R to change the owner recursively.");
  sb.append("\n\t[copyFromLocal <src> <remoteDst>] - Copies a file or a directory from " + "local filesystem to Alluxio filesystem.");
  sb.append("\n\t[copyToLocal <src> <localDst>] - Copies a file or a directory from the " + "Alluxio filesystem to the local filesystem.");
  sb.append("\n\t[count <path>] - Displays the number of files and directories matching " + "the specified prefix.");
  sb.append("\n\t[createLineage <inputFile1,...> <outputFile1,...> " + "[<cmd_arg1> <cmd_arg2> ...]] - Creates a lineage.");
  sb.append("\n\t[deleteLineage <lineageId> <cascade(true|false)>] - Deletes a lineage. If " + "cascade is specified as true, dependent lineages will also be deleted.");
  sb.append("\n\t[du <path>] - Displays the size of the specified file or directory.");
  sb.append("\n\t[fileInfo <path>] - Displays all block info for the specified file.");
  sb.append("\n\t[free <file path|folder path>] - Removes the file or directory(recursively) " + "from Alluxio memory space.");
  sb.append("\n\t[getCapacityBytes] - Gets the capacity of the Alluxio file system.");
  sb.append("\n\t[getUsedBytes] - Gets number of bytes used in the Alluxio file system.");
  sb.append("\n\t[listLineages] - Lists all lineages.");
  sb.append("\n\t[load <path>] - Loads a file or directory in Alluxio space, makes it " + "resident in memory.");
  sb.append("\n\t[loadMetadata <path>] - Loads metadata for the given Alluxio path from the " + "under file system.");
  sb.append("\n\t[location <path>] - Displays the list of hosts storing the specified file.");
  sb.append("\n\t[ls [-R] <path>] - Displays information for all files and directories " + "directly under the specified path. Specify -R to display files and " + "directories recursively.");
  sb.append("\n\t[mkdir <path1> [path2] ... [pathn]] - Creates the specified directories, " + "including any parent directories that are required.");
  sb.append("\n\t[mount <alluxioPath> <ufsURI>] - Mounts a UFS path onto an Alluxio path.");
  sb.append("\n\t[mv <src> <dst>] - Renames a file or directory.");
  sb.append("\n\t[persist <alluxioPath>] - Persists a file or directory currently stored " + "only in Alluxio to the UnderFileSystem.");
  sb.append("\n\t[pin <path>] - Pins the given file or directory in memory (works " + "recursively for directories). Pinned files are never evicted from memory, unless " + "TTL is set.");
  sb.append("\n\t[report <path>] - Reports to the master that a file is lost.");
  sb.append("\n\t[rm [-R] <path>] - Removes the specified file. Specify -R to remove file or " + "directory recursively.");
  sb.append("\n\t[setTtl <path> <time to live(in milliseconds)>] - Sets a new TTL value for " + "the file at path.");
  sb.append("\n\t[tail <path>] - Prints the file's last 1KB of contents to the console.");
  sb.append("\n\t[touch <path>] - Creates a 0 byte file. The file will be written to the " + "under file system.");
  sb.append("\n\t[unmount <alluxioPath>] - Unmounts an Alluxio path.");
  sb.append("\n\t[unpin <path>] - Unpins the given file or folder from memory " + "(works recursively for a directory).");
  sb.append("\n\\t[unsetTtl <path>] - Unsets the TTL value for the given path.");
  sb.append("\n\t[unpin <path>] - Unpin the given file to allow Alluxio to evict " + "this file again. If the given path is a directory, it recursively unpins " + "all files contained and any new files created within this directory.");
  return sb.toString();
}
