{
  logger.debug("property: {}",property);
  for (  String propertyKey : property.stringPropertyNames()) {
    logger.debug("propertyKey: {}",propertyKey);
    String[] keyValue=propertyKey.split("\\.",2);
    if (2 == keyValue.length) {
      logger.debug("key: {}, value: {}",keyValue[0],keyValue[1]);
      Properties prefixProperties;
      if (propertiesMap.containsKey(keyValue[0])) {
        prefixProperties=propertiesMap.get(keyValue[0]);
      }
 else {
        prefixProperties=new Properties();
        propertiesMap.put(keyValue[0],prefixProperties);
      }
      prefixProperties.put(keyValue[1],property.getProperty(propertyKey));
    }
  }
  Set<String> removeKeySet=new HashSet<>();
  for (  String key : propertiesMap.keySet()) {
    if (!COMMON_KEY.equals(key)) {
      Properties properties=propertiesMap.get(key);
      if (!properties.containsKey(DRIVER_KEY) || !properties.containsKey(URL_KEY)) {
        logger.error("{} will be ignored. {}.{} and {}.{} is mandatory.",key,DRIVER_KEY,key,key,URL_KEY);
        removeKeySet.add(key);
      }
    }
  }
  for (  String key : removeKeySet) {
    propertiesMap.remove(key);
  }
  logger.debug("propertiesMap: {}",propertiesMap);
}
