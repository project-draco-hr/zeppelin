{
  final String paragraphId=(String)fromMessage.get("id");
  final Note note=notebook.getNote(getOpenNoteId(conn));
  Paragraph p=note.getParagraph(paragraphId);
  p.setText((String)fromMessage.get("paragraph"));
  Map<String,Object> params=(Map<String,Object>)fromMessage.get("params");
  p.settings.setParams(params);
  if (note.getLastParagraph().getId().equals(p.getId())) {
    note.addParagraph();
    broadcastNote(note.id(),new Message(OP.NOTE).put("note",note));
  }
  note.persist();
  broadcastNote(note.id(),new Message(OP.NOTE).put("note",note));
  note.run(paragraphId,new JobListener(){
    @Override public void beforeStatusChange(    Job job,    Status before,    Status after){
    }
    @Override public void afterStatusChange(    Job job,    Status before,    Status after){
      if (after == Status.ERROR) {
        job.getException().printStackTrace();
      }
      if (job.isTerminated()) {
        LOG.info("Job {} is finished",job.getId());
        try {
          note.persist();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        broadcastNote(note.id(),new Message(OP.NOTE).put("note",note));
      }
 else {
        broadcastNote(note.id(),new Message(OP.NOTE).put("note",note));
      }
    }
  }
);
}
