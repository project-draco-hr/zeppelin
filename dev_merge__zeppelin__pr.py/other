import json
import os
import re
import subprocess
import sys
import urllib2
try:
    import jira.client
    JIRA_IMPORTED = True
except ImportError:
    JIRA_IMPORTED = False
ZEPPELIN_HOME = os.environ.get('ZEPPELIN_HOME', os.getcwd())
PR_REMOTE_NAME = os.environ.get('PR_REMOTE_NAME', 'apache-github')
PUSH_REMOTE_NAME = os.environ.get('PUSH_REMOTE_NAME', 'apache')
JIRA_USERNAME = os.environ.get('JIRA_USERNAME', 'moon')
JIRA_PASSWORD = os.environ.get('JIRA_PASSWORD', '00000')
GITHUB_BASE = 'https://github.com/apache/incubator-zeppelin/pull'
GITHUB_API_BASE = 'https://api.github.com/repos/apache/incubator-zeppelin'
JIRA_BASE = 'https://issues.apache.org/jira/browse'
JIRA_API_BASE = 'https://issues.apache.org/jira'
BRANCH_PREFIX = 'PR_TOOL'
os.chdir(ZEPPELIN_HOME)
original_head = run_cmd('git rev-parse HEAD')[:8]
latest_branch = 'master'
pr_num = raw_input('Which pull request would you like to merge? (e.g. 34): ')
pr = get_json(('%s/pulls/%s' % (GITHUB_API_BASE, pr_num)))
pr_events = get_json(('%s/issues/%s/events' % (GITHUB_API_BASE, pr_num)))
url = pr['url']
title = pr['title']
body = pr['body']
target_ref = pr['base']['ref']
user_login = pr['user']['login']
base_ref = pr['head']['ref']
pr_repo_desc = ('%s/%s' % (user_login, base_ref))
merge_commits = [e for e in pr_events if ((e['actor']['login'] == 'asfgit') and (e['event'] == 'closed'))]
if merge_commits:
    merge_hash = merge_commits[0]['commit_id']
    message = get_json(('%s/commits/%s' % (GITHUB_API_BASE, merge_hash)))['commit']['message']
    print ('Pull request %s has already been merged, assuming you want to backport' % pr_num)
    commit_is_downloaded = (run_cmd(['git', 'rev-parse', '--quiet', '--verify', ('%s^{commit}' % merge_hash)]).strip() != '')
    if (not commit_is_downloaded):
        fail(("Couldn't find any merge commit for #%s, you may need to update HEAD." % pr_num))
    print ('Found commit %s:\n%s' % (merge_hash, message))
    cherry_pick(pr_num, merge_hash, latest_branch)
    sys.exit(0)
if (not bool(pr['mergeable'])):
    msg = (('Pull request %s is not mergeable in its current form.\n' % pr_num) + 'Continue? (experts only!)')
    continue_maybe(msg)
print ('\n=== Pull Request #%s ===' % pr_num)
print ('title\t%s\nsource\t%s\ntarget\t%s\nurl\t%s' % (title, pr_repo_desc, target_ref, url))
continue_maybe(('Proceed with merging pull request #%s?' % pr_num))
merged_refs = [target_ref]
merge_hash = merge_pr(pr_num, target_ref)
pick_prompt = ('Would you like to pick %s into another branch?' % merge_hash)
while (raw_input(('\n%s (y/n): ' % pick_prompt)).lower() == 'y'):
    merged_refs = (merged_refs + [cherry_pick(pr_num, merge_hash, latest_branch)])
if JIRA_IMPORTED:
    if (JIRA_USERNAME and JIRA_PASSWORD):
        continue_maybe('Would you like to update an associated JIRA?')
        jira_comment = ('Issue resolved by pull request %s\n[%s/%s]' % (pr_num, GITHUB_BASE, pr_num))
        resolve_jira_issues(title, merged_refs, jira_comment)
    else:
        print 'JIRA_USERNAME and JIRA_PASSWORD not set'
        print 'Exiting without trying to close the associated JIRA.'
else:
    print "Could not find jira library. Run 'sudo pip install jira' to install."
    print 'Exiting without trying to close the associated JIRA.'
