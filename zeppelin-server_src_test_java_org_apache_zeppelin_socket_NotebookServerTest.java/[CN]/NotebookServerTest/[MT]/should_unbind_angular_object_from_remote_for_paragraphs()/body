{
  final String varName="name";
  final String value="val";
  final Message messageReceived=new Message(OP.ANGULAR_OBJECT_CLIENT_UNBIND).put("noteId","noteId").put("name",varName).put("paragraphId","paragraphId");
  final NotebookServer server=new NotebookServer();
  final Notebook notebook=mock(Notebook.class);
  final Note note=mock(Note.class,RETURNS_DEEP_STUBS);
  when(notebook.getNote("noteId")).thenReturn(note);
  final Paragraph paragraph=mock(Paragraph.class,RETURNS_DEEP_STUBS);
  when(note.getParagraph("paragraphId")).thenReturn(paragraph);
  final RemoteAngularObjectRegistry mdRegistry=mock(RemoteAngularObjectRegistry.class);
  final InterpreterGroup mdGroup=new InterpreterGroup("mdGroup");
  mdGroup.setAngularObjectRegistry(mdRegistry);
  when(paragraph.getCurrentRepl().getInterpreterGroup()).thenReturn(mdGroup);
  final AngularObject ao1=AngularObjectBuilder.build(varName,value,"noteId","paragraphId");
  when(mdRegistry.removeAndNotifyRemoteProcess(varName,"noteId","paragraphId")).thenReturn(ao1);
  NotebookSocket conn=mock(NotebookSocket.class);
  NotebookSocket otherConn=mock(NotebookSocket.class);
  final String mdMsg1=server.serializeMessage(new Message(OP.ANGULAR_OBJECT_REMOVE).put("angularObject",ao1).put("interpreterGroupId","mdGroup").put("noteId","noteId").put("paragraphId","paragraphId"));
  server.noteSocketMap.put("noteId",asList(conn,otherConn));
  server.angularObjectClientUnbind(conn,new HashSet<String>(),notebook,messageReceived);
  verify(mdRegistry,never()).removeAndNotifyRemoteProcess(varName,"noteId",null);
  verify(otherConn).send(mdMsg1);
}
