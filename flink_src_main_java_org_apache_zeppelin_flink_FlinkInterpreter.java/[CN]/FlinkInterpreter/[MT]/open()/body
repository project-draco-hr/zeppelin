{
  out=new ByteArrayOutputStream();
  flinkConf=new org.apache.flink.configuration.Configuration();
  Properties intpProperty=getProperty();
  for (  Object k : intpProperty.keySet()) {
    String key=(String)k;
    String val=toString(intpProperty.get(key));
    flinkConf.setString(key,val);
  }
  if (localMode()) {
    startFlinkMiniCluster();
  }
  flinkIloop=new FlinkILoop(getHost(),getPort(),flinkConf,(BufferedReader)null,new PrintWriter(out));
  flinkIloop.settings_$eq(createSettings());
  flinkIloop.createInterpreter();
  imain=flinkIloop.intp();
  org.apache.flink.api.scala.ExecutionEnvironment benv=flinkIloop.scalaBenv();
  org.apache.flink.streaming.api.scala.StreamExecutionEnvironment senv=flinkIloop.scalaSenv();
  senv.getConfig().disableSysoutLogging();
  benv.getConfig().disableSysoutLogging();
  imain.interpret("@transient var _binder = new java.util.HashMap[String, Object]()");
  Map<String,Object> binder=(Map<String,Object>)getLastObject();
  imain.interpret("import scala.tools.nsc.io._");
  imain.interpret("import Properties.userHome");
  imain.interpret("import scala.compat.Platform.EOL");
  imain.interpret("import org.apache.flink.api.scala._");
  imain.interpret("import org.apache.flink.api.common.functions._");
  binder.put("benv",benv);
  imain.interpret("val benv = _binder.get(\"benv\").asInstanceOf[" + benv.getClass().getName() + "]");
  binder.put("senv",senv);
  imain.interpret("val senv = _binder.get(\"senv\").asInstanceOf[" + senv.getClass().getName() + "]");
}
