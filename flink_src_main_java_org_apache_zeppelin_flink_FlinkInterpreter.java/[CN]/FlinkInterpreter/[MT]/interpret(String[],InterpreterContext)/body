{
  final IMain imain=flinkIloop.intp();
  String[] linesToRun=new String[lines.length + 1];
  for (int i=0; i < lines.length; i++) {
    linesToRun[i]=lines[i];
  }
  linesToRun[lines.length]="print(\"\")";
  System.setOut(new PrintStream(out));
  out.reset();
  Code r=null;
  String incomplete="";
  for (int l=0; l < linesToRun.length; l++) {
    final String s=linesToRun[l];
    if (l + 1 < linesToRun.length) {
      String nextLine=linesToRun[l + 1].trim();
      if (nextLine.startsWith(".") && !nextLine.startsWith("..") && !nextLine.startsWith("./")) {
        incomplete+=s + "\n";
        continue;
      }
    }
    final String currentCommand=incomplete;
    scala.tools.nsc.interpreter.Results.Result res=null;
    try {
      res=Console.withOut(System.out,new AbstractFunction0<Results.Result>(){
        @Override public Results.Result apply(){
          return imain.interpret(currentCommand + s);
        }
      }
);
    }
 catch (    Exception e) {
      logger.info("Interpreter exception",e);
      return new InterpreterResult(Code.ERROR,InterpreterUtils.getMostRelevantMessage(e));
    }
    r=getResultCode(res);
    if (r == Code.ERROR) {
      return new InterpreterResult(r,out.toString());
    }
 else     if (r == Code.INCOMPLETE) {
      incomplete+=s + "\n";
    }
 else {
      incomplete="";
    }
  }
  if (r == Code.INCOMPLETE) {
    return new InterpreterResult(r,"Incomplete expression");
  }
 else {
    return new InterpreterResult(r,out.toString());
  }
}
