{
  try {
    if (exceptionOnConnect != null) {
      return new InterpreterResult(Code.ERROR,exceptionOnConnect.getMessage());
    }
    currentStatement=getJdbcConnection().createStatement();
    boolean isExplain=StringUtils.containsIgnoreCase(sql,EXPLAIN_PREDICATE);
    StringBuilder msg=(isExplain) ? new StringBuilder() : new StringBuilder(TABLE_MAGIC_TAG);
    ResultSet res=null;
    try {
      boolean hasResult=currentStatement.execute(sql);
      if (hasResult) {
        res=currentStatement.getResultSet();
        ResultSetMetaData md=res.getMetaData();
        String row=clean(isExplain,md.getColumnName(1));
        for (int i=2; i < md.getColumnCount() + 1; i++)         row+=TAB + clean(isExplain,md.getColumnName(i));
        msg.append(row + NEWLINE);
        int rowCount=0;
        while (res.next() && rowCount < getMaxResult()) {
          row=clean(isExplain,res.getString(1));
          for (int i=2; i < md.getColumnCount() + 1; i++)           row+=TAB + clean(isExplain,res.getString(i));
          msg.append(row + NEWLINE);
          rowCount++;
        }
      }
 else {
        msg.append(UPDATE_HEADER + NEWLINE + "Rows affected: "+ currentStatement.getUpdateCount()+ NEWLINE);
      }
    }
  finally {
      try {
        if (res != null)         res.close();
        getJdbcConnection().commit();
        currentStatement.close();
      }
  finally {
        currentStatement=null;
      }
    }
    return new InterpreterResult(Code.SUCCESS,msg.toString());
  }
 catch (  SQLException ex) {
    logger.error("Can not run " + sql,ex);
    return new InterpreterResult(Code.ERROR,ex.getMessage());
  }
}
