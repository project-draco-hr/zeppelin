{
  Artifact artifact=new DefaultArtifact(dep.getGroupArtifactVersion());
  if (dep.isRecursive()) {
    DependencyFilter classpathFlter=DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE);
    ExclusionsDependencyFilter exclusionFilter=new ExclusionsDependencyFilter(dep.getExclusions());
    CollectRequest collectRequest=new CollectRequest();
    collectRequest.setRoot(new org.sonatype.aether.graph.Dependency(artifact,JavaScopes.COMPILE));
    collectRequest.addRepository(mavenCentral);
    collectRequest.addRepository(mavenLocal);
    for (    Repository repo : repositories) {
      RemoteRepository rr=new RemoteRepository(repo.getName(),"default",repo.getUrl());
      rr.setPolicy(repo.isSnapshot(),null);
      collectRequest.addRepository(rr);
    }
    DependencyRequest dependencyRequest=new DependencyRequest(collectRequest,DependencyFilterUtils.andFilter(exclusionFilter,classpathFlter));
    return system.resolveDependencies(session,dependencyRequest).getArtifactResults();
  }
 else {
    ArtifactRequest artifactRequest=new ArtifactRequest();
    artifactRequest.setArtifact(artifact);
    artifactRequest.addRepository(mavenCentral);
    artifactRequest.addRepository(mavenLocal);
    for (    Repository repo : repositories) {
      RemoteRepository rr=new RemoteRepository(repo.getName(),"default",repo.getUrl());
      rr.setPolicy(repo.isSnapshot(),null);
      artifactRequest.addRepository(rr);
    }
    ArtifactResult artifactResult=system.resolveArtifact(session,artifactRequest);
    LinkedList<ArtifactResult> results=new LinkedList<ArtifactResult>();
    results.add(artifactResult);
    return results;
  }
}
