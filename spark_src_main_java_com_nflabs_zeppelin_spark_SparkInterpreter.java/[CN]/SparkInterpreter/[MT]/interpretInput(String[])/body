{
  SparkEnv.set(env);
  String[] linesToRun=new String[lines.length + 1];
  for (int i=0; i < lines.length; i++) {
    linesToRun[i]=lines[i];
  }
  linesToRun[lines.length]="print(\"\")";
  Console.setOut((java.io.PrintStream)binder.get("out"));
  out.reset();
  Code r=null;
  String incomplete="";
  for (  String s : linesToRun) {
    scala.tools.nsc.interpreter.Results.Result res=null;
    try {
      res=intp.interpret(incomplete + s);
    }
 catch (    Exception e) {
      sc.clearJobGroup();
      logger.info("Interpreter exception",e);
      return new InterpreterResult(Code.ERROR,InterpreterUtils.getMostRelevantMessage(e));
    }
    r=getResultCode(res);
    if (r == Code.ERROR) {
      sc.clearJobGroup();
      return new InterpreterResult(r,out.toString());
    }
 else     if (r == Code.INCOMPLETE) {
      incomplete+=s + "\n";
    }
 else {
      incomplete="";
    }
  }
  if (r == Code.INCOMPLETE) {
    return new InterpreterResult(r,"Incomplete expression");
  }
 else {
    return new InterpreterResult(r,out.toString());
  }
}
