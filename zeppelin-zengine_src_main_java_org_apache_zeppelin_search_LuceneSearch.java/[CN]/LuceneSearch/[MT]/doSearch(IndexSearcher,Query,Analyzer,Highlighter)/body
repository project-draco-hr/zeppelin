{
  List<Map<String,String>> matchingParagraphs=Lists.newArrayList();
  ScoreDoc[] hits;
  try {
    hits=searcher.search(query,20).scoreDocs;
    for (int i=0; i < hits.length; i++) {
      LOG.debug("doc={} score={}",hits[i].doc,hits[i].score);
      int id=hits[i].doc;
      Document doc=searcher.doc(id);
      String path=doc.get(ID_FIELD);
      if (path != null) {
        LOG.debug((i + 1) + ". " + path);
        String title=doc.get("title");
        if (title != null) {
          LOG.debug("   Title: {}",doc.get("title"));
        }
        String text=doc.get(SEARCH_FIELD);
        TokenStream tokenStream=TokenSources.getTokenStream(searcher.getIndexReader(),id,SEARCH_FIELD,analyzer);
        TextFragment[] frag=highlighter.getBestTextFragments(tokenStream,text,true,3);
        LOG.debug("    {} fragments found for query '{}'",frag.length,query);
        for (int j=0; j < frag.length; j++) {
          if ((frag[j] != null) && (frag[j].getScore() > 0)) {
            LOG.debug("    Fragment: {}",frag[j].toString());
          }
        }
        String fragment=(frag != null && frag.length > 0) ? frag[0].toString() : "";
        matchingParagraphs.add(ImmutableMap.of("id",path,"name",title,"snippet",fragment,"text",text));
      }
 else {
        LOG.info("{}. No {} for this document",i + 1,ID_FIELD);
      }
    }
  }
 catch (  IOException|InvalidTokenOffsetsException e) {
    LOG.error("Exception on searching for {}",query,e);
  }
  return matchingParagraphs;
}
