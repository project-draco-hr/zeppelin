{
  try {
    if (userSessionMap.get(interpreterContext.getAuthenticationInfo().getUser()) == null) {
      try {
        userSessionMap.put(interpreterContext.getAuthenticationInfo().getUser(),livyHelper.createSession(interpreterContext,"spark"));
        livyHelper.initializeSpark(interpreterContext,userSessionMap);
      }
 catch (      Exception e) {
        LOGGER.error("Exception in LivySparkSQLInterpreter while interpret ",e);
        return new InterpreterResult(InterpreterResult.Code.ERROR,e.getMessage());
      }
    }
    if (line == null || line.trim().length() == 0) {
      return new InterpreterResult(InterpreterResult.Code.SUCCESS,"");
    }
    InterpreterResult res=livyHelper.interpret("sqlContext.sql(\"" + line.replaceAll("\"","\\\\\"").replaceAll("\\n"," ") + "\").show("+ property.get("livy.spark.sql.maxResult")+ ")",interpreterContext,userSessionMap);
    if (res.code() == InterpreterResult.Code.SUCCESS) {
      StringBuilder resMsg=new StringBuilder();
      resMsg.append("%table ");
      String[] rows=res.message().split("\n");
      String[] headers=rows[1].split("\\|");
      for (int head=1; head < headers.length; head++) {
        resMsg.append(headers[head].trim()).append("\t");
      }
      resMsg.append("\n");
      if (rows[3].indexOf("+") == 0) {
      }
 else {
        for (int cols=3; cols < rows.length - 1; cols++) {
          String[] col=rows[cols].split("\\|");
          for (int data=1; data < col.length; data++) {
            resMsg.append(col[data].trim()).append("\t");
          }
          resMsg.append("\n");
        }
      }
      if (rows[rows.length - 1].indexOf("only") == 0) {
        resMsg.append("<font color=red>" + rows[rows.length - 1] + ".</font>");
      }
      return new InterpreterResult(InterpreterResult.Code.SUCCESS,resMsg.toString());
    }
 else {
      return res;
    }
  }
 catch (  Exception e) {
    LOGGER.error("Exception in LivySparkSQLInterpreter while interpret ",e);
    return new InterpreterResult(InterpreterResult.Code.ERROR,InterpreterUtils.getMostRelevantMessage(e));
  }
}
