{
  repl.interpret("case class Person(name:String, age:Int)");
  repl.interpret("val people = sc.parallelize(Seq(Person(\"moon\", 33), Person(\"jobs\", 51), Person(\"gates\", 51), Person(\"park\", 34)))");
  assertEquals(Code.SUCCESS,repl.interpret("people.take(3)").code());
  Properties p=new Properties();
  p.put("share",share);
  SparkInterpreter repl2=new SparkInterpreter(p);
  repl2.open();
  repl.interpret("case class Man(name:String, age:Int)");
  repl.interpret("val man = sc.parallelize(Seq(Man(\"moon\", 33), Man(\"jobs\", 51), Man(\"gates\", 51), Man(\"park\", 34)))");
  assertEquals(Code.SUCCESS,repl.interpret("man.take(3)").code());
  repl2.getSparkContext().stop();
}
