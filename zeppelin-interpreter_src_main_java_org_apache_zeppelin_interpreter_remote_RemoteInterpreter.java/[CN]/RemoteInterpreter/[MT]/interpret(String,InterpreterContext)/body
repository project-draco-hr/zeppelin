{
  logger.debug("st: {}",st);
  FormType form=getFormType();
  RemoteInterpreterProcess interpreterProcess=getInterpreterProcess();
  Client client=null;
  try {
    client=interpreterProcess.getClient();
  }
 catch (  Exception e1) {
    throw new InterpreterException(e1);
  }
  InterpreterContextRunnerPool interpreterContextRunnerPool=interpreterProcess.getInterpreterContextRunnerPool();
  List<InterpreterContextRunner> runners=context.getRunners();
  if (runners != null && runners.size() != 0) {
    String noteId=runners.get(0).getNoteId();
    interpreterContextRunnerPool.clear(noteId);
    interpreterContextRunnerPool.addAll(noteId,runners);
  }
  boolean broken=false;
  try {
    final GUI currentGUI=context.getGui();
    RemoteInterpreterResult remoteResult=client.interpret(noteId,className,st,convert(context));
    Map<String,Object> remoteConfig=(Map<String,Object>)gson.fromJson(remoteResult.getConfig(),new TypeToken<Map<String,Object>>(){
    }
.getType());
    context.getConfig().clear();
    context.getConfig().putAll(remoteConfig);
    if (form == FormType.NATIVE) {
      GUI remoteGui=gson.fromJson(remoteResult.getGui(),GUI.class);
      currentGUI.clear();
      currentGUI.setParams(remoteGui.getParams());
      currentGUI.setForms(remoteGui.getForms());
    }
 else     if (form == FormType.SIMPLE) {
      final Map<String,Input> currentForms=currentGUI.getForms();
      final Map<String,Object> currentParams=currentGUI.getParams();
      final GUI remoteGUI=gson.fromJson(remoteResult.getGui(),GUI.class);
      final Map<String,Input> remoteForms=remoteGUI.getForms();
      final Map<String,Object> remoteParams=remoteGUI.getParams();
      currentForms.putAll(remoteForms);
      currentParams.putAll(remoteParams);
    }
    InterpreterResult result=convert(remoteResult);
    return result;
  }
 catch (  TException e) {
    broken=true;
    throw new InterpreterException(e);
  }
 finally {
    interpreterProcess.releaseClient(client,broken);
  }
}
