{
  Map<String,ZeppelinConnection> connections=new HashMap<String,ZeppelinConnection>();
  String currentDriverName=null;
  ZeppelinConnection currentConnection=new LazyConnection(currentDriverName);
  connections.put(currentDriverName,currentConnection);
  ZPlan plan=new ZPlan();
  Z currentZ=null;
  String escapeSeq="\"',;<%>!";
  char escapeChar='\\';
  String[] blockStart=new String[]{"\"","'","<%","N_<","!"};
  String[] blockEnd=new String[]{"\"","'","%>","N_>",";"};
  String[] t=Util.split(stmts,escapeSeq,escapeChar,blockStart,blockEnd,op,true);
  String currentOp=null;
  for (int i=0; i < t.length; i++) {
    String stmt=t[i];
    if (stmt == null)     continue;
    stmt=stmt.trim();
    if (stmt.length() == 0)     continue;
    boolean operatorFound=false;
    for (    String o : op) {
      if (o.equals(stmt)) {
        if (currentOp != null) {
          throw new ZQLException("Operator " + o + " can not come after "+ currentOp);
        }
        currentOp=o;
        operatorFound=true;
        break;
      }
    }
    if (operatorFound == true) {
      continue;
    }
    if (currentZ == null && currentOp != null) {
      throw new ZQLException(currentOp + " can not be at the beginning");
    }
    if (op[2].equals(currentOp)) {
      throw new ZQLException("redirection (append) not implemented");
    }
 else     if (op[3].equals(currentOp)) {
      if (currentZ != null) {
        RedirectStatement red=new RedirectStatement(stmt);
        currentZ.withName(red.getName());
        currentZ.withTable(red.isTable());
        currentOp=null;
        continue;
      }
 else {
        throw new ZQLException("Can not redirect empty");
      }
    }
    if (stmt.startsWith("@")) {
      if (currentZ != null) {
        if (currentOp == null || (currentOp != null && currentOp.equals(op[0]))) {
          currentZ.setConnection(currentConnection);
          plan.add(currentZ);
          currentZ=null;
          currentOp=null;
        }
 else {
          throw new ZQLException("Can not piped or redirected from/to exec statement");
        }
      }
      try {
        AnnotationStatement annotation=new AnnotationStatement(stmt);
        if (ANNOTATION.DRIVER == annotation.getAnnotation()) {
          if (COMMAND.SET == annotation.getCommand()) {
            String driverName=annotation.getArgument();
            if (driverName == null) {
              driverName=null;
            }
            currentConnection=connections.get(driverName);
            if (currentConnection == null) {
              currentConnection=new LazyConnection(driverName);
              connections.put(driverName,currentConnection);
            }
          }
        }
        currentZ=annotation;
      }
 catch (      ZException e) {
        throw new ZQLException(e);
      }
      continue;
    }
    Z z=null;
    try {
      z=loadL(stmt,currentConnection);
    }
 catch (    ZException e) {
    }
    if (z == null) {
      Q q;
      try {
        q=new Q(stmt);
      }
 catch (      ZException e) {
        throw new ZQLException(e);
      }
      z=q;
    }
    if (currentZ == null) {
      currentZ=z;
    }
 else     if (currentOp == null) {
      throw new ZQLException("Assert! Statment does not have operator in between");
    }
 else     if (currentOp.equals(op[0])) {
      currentZ.setConnection(currentConnection);
      plan.add(currentZ);
      currentZ=z;
      currentOp=null;
    }
 else     if (currentOp.equals(op[1])) {
      currentZ=currentZ.pipe(z);
      currentOp=null;
    }
  }
  if (currentZ != null) {
    currentZ.setConnection(currentConnection);
    plan.add(currentZ);
  }
  return plan;
}
