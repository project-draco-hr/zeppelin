{
  Properties p=new Properties();
  RemoteInterpreter intpA=new RemoteInterpreter(p,MockInterpreterA.class.getName(),new File("../bin/interpreter.sh").getAbsolutePath(),"fake",env,10 * 1000);
  intpGroup.add(intpA);
  intpA.setInterpreterGroup(intpGroup);
  RemoteInterpreter intpB=new RemoteInterpreter(p,MockInterpreterB.class.getName(),new File("../bin/interpreter.sh").getAbsolutePath(),"fake",env,10 * 1000);
  intpGroup.add(intpB);
  intpB.setInterpreterGroup(intpGroup);
  intpA.open();
  intpB.open();
  long start=System.currentTimeMillis();
  InterpreterResult ret=intpA.interpret("500",new InterpreterContext("note","id","title","text",new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LinkedList<InterpreterContextRunner>()));
  assertEquals("500",ret.message());
  ret=intpB.interpret("500",new InterpreterContext("note","id","title","text",new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LinkedList<InterpreterContextRunner>()));
  assertEquals("1000",ret.message());
  long end=System.currentTimeMillis();
  assertTrue(end - start >= 1000);
  intpA.close();
  intpB.close();
}
