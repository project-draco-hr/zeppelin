{
  Properties p=new Properties();
  final RemoteInterpreter intpA=createMockInterpreterA(p);
  intpGroup.add(intpA);
  intpA.setInterpreterGroup(intpGroup);
  intpA.open();
  Job jobA=new Job("jobA",null){
    @Override public int progress(){
      return 0;
    }
    @Override public Map<String,Object> info(){
      return null;
    }
    @Override protected Object jobRun() throws Throwable {
      return intpA.interpret("2000",new InterpreterContext("note","jobA","title","text",new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LinkedList<InterpreterContextRunner>(),null));
    }
    @Override protected boolean jobAbort(){
      return false;
    }
  }
;
  intpA.getScheduler().submit(jobA);
  while (intpA.getScheduler().getJobsRunning().size() == 0) {
    Thread.sleep(100);
  }
  RemoteInterpreterProcess processA=intpA.getInterpreterProcess();
  intpA.close();
  intpA.setInterpreterGroup(new InterpreterGroup(intpA.getInterpreterGroup().getId()));
  intpA.open();
  RemoteInterpreterProcess processB=intpA.getInterpreterProcess();
  assertNotSame(processA.hashCode(),processB.hashCode());
}
