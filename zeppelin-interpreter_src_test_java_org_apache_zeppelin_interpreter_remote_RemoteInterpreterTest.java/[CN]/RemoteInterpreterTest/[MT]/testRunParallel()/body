{
  Properties p=new Properties();
  p.put("parallel","true");
  final RemoteInterpreter intpA=createMockInterpreterA(p);
  intpGroup.add(intpA);
  intpA.setInterpreterGroup(intpGroup);
  intpA.open();
  int concurrency=4;
  final int timeToSleep=1000;
  final List<String> results=new LinkedList<String>();
  long start=System.currentTimeMillis();
  Scheduler scheduler=intpA.getScheduler();
  for (int i=0; i < concurrency; i++) {
    final String jobId=Integer.toString(i);
    scheduler.submit(new Job(jobId,Integer.toString(i),null,300){
      @Override public int progress(){
        return 0;
      }
      @Override public Map<String,Object> info(){
        return null;
      }
      @Override protected Object jobRun() throws Throwable {
        String stmt=Integer.toString(timeToSleep);
        InterpreterResult ret=intpA.interpret(stmt,new InterpreterContext("note",jobId,"title","text",new AuthenticationInfo(),new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LocalResourcePool("pool1"),new LinkedList<InterpreterContextRunner>(),null));
synchronized (results) {
          results.add(ret.message());
          results.notify();
        }
        return stmt;
      }
      @Override protected boolean jobAbort(){
        return false;
      }
    }
);
  }
synchronized (results) {
    while (results.size() != concurrency) {
      results.wait(300);
    }
  }
  long end=System.currentTimeMillis();
  assertTrue(end - start < timeToSleep * concurrency);
  intpA.close();
}
