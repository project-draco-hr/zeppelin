{
  Properties p=new Properties();
  intpGroup.put("note",new LinkedList<Interpreter>());
  RemoteInterpreter intpA=createMockInterpreterA(p);
  intpGroup.get("note").add(intpA);
  intpA.setInterpreterGroup(intpGroup);
  RemoteInterpreter intpB=createMockInterpreterB(p);
  intpGroup.get("note").add(intpB);
  intpB.setInterpreterGroup(intpGroup);
  RemoteInterpreterProcess process=intpA.getInterpreterProcess();
  process.equals(intpB.getInterpreterProcess());
  assertFalse(process.isRunning());
  assertEquals(0,process.getNumIdleClient());
  assertEquals(0,process.referenceCount());
  intpA.open();
  assertTrue(process.isRunning());
  assertEquals(1,process.getNumIdleClient());
  assertEquals(2,process.referenceCount());
  intpA.interpret("1",new InterpreterContext("note","id","title","text",new AuthenticationInfo(),new HashMap<String,Object>(),new GUI(),new AngularObjectRegistry(intpGroup.getId(),null),new LocalResourcePool("pool1"),new LinkedList<InterpreterContextRunner>(),null));
  intpB.open();
  assertEquals(2,process.referenceCount());
  intpA.close();
  assertEquals(1,process.referenceCount());
  intpB.close();
  assertEquals(0,process.referenceCount());
  assertFalse(process.isRunning());
}
