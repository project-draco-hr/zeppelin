{
synchronized (referenceCount) {
    if (executor == null) {
      if (interpreterGroup.containsKey(Constants.EXISTING_PROCESS)) {
        Properties properties=interpreterGroup.getProperty();
        isInterpreterAlreadyExecuting=true;
        if (isInterpreterAlreadyExecuting) {
          if (properties.containsKey(Constants.ZEPPELIN_INTERPRETER_HOST)) {
            host=properties.getProperty(Constants.ZEPPELIN_INTERPRETER_HOST);
          }
 else {
            throw new InterpreterException("Can't find value for option Host." + "Please specify the host on which interpreter is executing");
          }
          if (properties.containsKey(Constants.ZEPPELIN_INTERPRETER_PORT)) {
            port=Integer.parseInt(interpreterGroup.getProperty().getProperty(Constants.ZEPPELIN_INTERPRETER_PORT));
          }
 else {
            throw new InterpreterException("Can't find value for option Port." + "Please specify the port on which interpreter is listening");
          }
        }
        running=true;
      }
      if (!isInterpreterAlreadyExecuting) {
        try {
          port=RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces();
        }
 catch (        IOException e1) {
          throw new InterpreterException(e1);
        }
        CommandLine cmdLine=CommandLine.parse(interpreterRunner);
        cmdLine.addArgument("-d",false);
        cmdLine.addArgument(interpreterDir,false);
        cmdLine.addArgument("-p",false);
        cmdLine.addArgument(Integer.toString(port),false);
        cmdLine.addArgument("-l",false);
        cmdLine.addArgument(localRepoDir,false);
        executor=new DefaultExecutor();
        watchdog=new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT);
        executor.setWatchdog(watchdog);
        running=true;
        try {
          Map procEnv=EnvironmentUtils.getProcEnvironment();
          procEnv.putAll(env);
          logger.info("Run interpreter process {}",cmdLine);
          executor.execute(cmdLine,procEnv,this);
        }
 catch (        IOException e) {
          running=false;
          throw new InterpreterException(e);
        }
      }
 else {
        logger.info("Not starting interpreter as \"isExistingProcess\" is enabled");
      }
      long startTime=System.currentTimeMillis();
      while (System.currentTimeMillis() - startTime < connectTimeout) {
        if (RemoteInterpreterUtils.checkIfRemoteEndpointAccessible(host,port)) {
          break;
        }
 else {
          try {
            Thread.sleep(500);
          }
 catch (          InterruptedException e) {
            logger.error("Exception in RemoteInterpreterProcess while synchronized reference " + "Thread.sleep",e);
          }
        }
      }
      clientPool=new GenericObjectPool<Client>(new ClientFactory(host,port));
      remoteInterpreterEventPoller.setInterpreterGroup(interpreterGroup);
      remoteInterpreterEventPoller.setInterpreterProcess(this);
      remoteInterpreterEventPoller.start();
    }
    return referenceCount.incrementAndGet();
  }
}
