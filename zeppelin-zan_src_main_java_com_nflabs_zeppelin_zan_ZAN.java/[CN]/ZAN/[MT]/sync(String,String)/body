{
  Map<String,List<String>> changes=new HashMap<String,List<String>>();
  changes.put("added",new LinkedList<String>());
  changes.put("modified",new LinkedList<String>());
  changes.put("removed",new LinkedList<String>());
  if (syncDfs() == false)   return changes;
  File local=getLocalLibraryPath(libraryName + relativePath);
  Path remote=getRemoteLibraryPath(libraryName + relativePath);
  try {
    if (local.exists() == false) {
      if (dfs.exists(remote)) {
        dfs.delete(remote,true);
        changes.get("removed").add(remote.toString());
      }
    }
 else     if (local.isFile()) {
      if (dfs.exists(remote) && dfs.isFile(remote) == false) {
        dfs.delete(remote,true);
        changes.get("removed").add(remote.toString());
      }
      if (dfs.exists(remote)) {
        FileStatus remoteStatus=dfs.getFileStatus(remote);
        if (local.length() != remoteStatus.getLen() || local.lastModified() != remoteStatus.getModificationTime()) {
          dfs.delete(remote,true);
          changes.get("modified").add(remote.toString());
          dfs.copyFromLocalFile(new Path(local.getAbsolutePath()),remote);
        }
      }
 else {
        changes.get("added").add(remote.toString());
        dfs.copyFromLocalFile(new Path(local.getAbsolutePath()),remote);
      }
    }
 else {
      if (dfs.exists(remote)) {
        if (dfs.isFile(remote)) {
          dfs.delete(remote,true);
          changes.get("removed").add(remote.toString());
        }
      }
 else {
        changes.get("added").add(remote.toString());
        dfs.mkdirs(remote);
      }
      File[] files=local.listFiles();
      if (files == null)       return changes;
      for (      File f : files) {
        if (f.getName().startsWith("."))         continue;
        Map<String,List<String>> ch=sync(libraryName,relativePath + "/" + f.getName());
        changes.get("added").addAll(ch.get("added"));
        changes.get("removed").addAll(ch.get("removed"));
        changes.get("modified").addAll(ch.get("modified"));
      }
      FileStatus[] dfsFiles=dfs.listStatus(remote);
      if (dfsFiles != null) {
        for (        FileStatus dfsFile : dfsFiles) {
          boolean delete=true;
          if (files != null) {
            for (            File f : files) {
              if (f.getName().equals(dfsFile.getPath().getName())) {
                delete=false;
              }
            }
          }
          if (delete == true) {
            dfs.delete(dfsFile.getPath(),true);
            changes.get("removed").add(dfsFile.toString());
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ZANException(e);
  }
  return changes;
}
