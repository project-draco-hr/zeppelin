{
  List<String> splits=new ArrayList<String>();
  String curString="";
  boolean escape=false;
  int lastEscapeOffset=-1;
  int blockStartPos=-1;
  List<Integer> blockStack=new LinkedList<Integer>();
  for (int i=0; i < str.length(); i++) {
    char c=str.charAt(i);
    if (c == escapeChar && escape == false) {
      escape=true;
      continue;
    }
    if (escape == true) {
      if (escapeSeq.indexOf(c) < 0) {
        curString+=escapeChar;
      }
      curString+=c;
      escape=false;
      lastEscapeOffset=curString.length();
      continue;
    }
    if (blockStack.size() > 0) {
      curString+=c;
      boolean multicharBlockDetected=false;
      for (int b=0; b < blockStart.length; b++) {
        if (blockStartPos >= 0 && getBlockStr(blockStart[b]).compareTo(str.substring(blockStartPos,i)) == 0) {
          blockStack.remove(0);
          blockStack.add(0,b);
          multicharBlockDetected=true;
          break;
        }
      }
      if (multicharBlockDetected == true)       continue;
      if (isNestedBlock(blockStart[blockStack.get(0)]) == true) {
        if (curString.substring(lastEscapeOffset + 1).endsWith(getBlockStr(blockStart[blockStack.get(0)])) == true) {
          blockStack.add(0,blockStack.get(0));
          blockStartPos=i;
          continue;
        }
      }
      if (curString.substring(lastEscapeOffset + 1).endsWith(getBlockStr(blockEnd[blockStack.get(0)]))) {
        if (isNestedBlock(blockEnd[blockStack.get(0)]) == false) {
          for (          String splitter : splitters) {
            if (splitter.compareTo(getBlockStr(blockEnd[blockStack.get(0)])) == 0) {
              splits.add(curString);
              if (includeSplitter == true) {
                splits.add(splitter);
              }
              curString="";
              lastEscapeOffset=-1;
              break;
            }
          }
        }
        blockStartPos=-1;
        blockStack.remove(0);
        continue;
      }
    }
 else {
      boolean splitted=false;
      for (      String splitter : splitters) {
        if (splitter.compareTo(str.substring(i,Math.min(i + splitter.length(),str.length()))) == 0) {
          splits.add(curString);
          if (includeSplitter == true) {
            splits.add(splitter);
          }
          curString="";
          lastEscapeOffset=-1;
          i+=splitter.length() - 1;
          splitted=true;
          break;
        }
      }
      if (splitted == true) {
        continue;
      }
      curString+=c;
      for (int b=0; b < blockStart.length; b++) {
        if (curString.substring(lastEscapeOffset + 1).endsWith(getBlockStr(blockStart[b])) == true) {
          blockStack.add(0,b);
          blockStartPos=i;
          break;
        }
      }
    }
  }
  if (curString.length() > 0)   splits.add(curString.trim());
  return splits.toArray(new String[]{});
}
