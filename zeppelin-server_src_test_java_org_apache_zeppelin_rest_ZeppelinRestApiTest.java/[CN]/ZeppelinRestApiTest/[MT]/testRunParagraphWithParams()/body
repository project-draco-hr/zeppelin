{
  LOG.info("testRunParagraphWithParams");
  Note note=ZeppelinServer.notebook.createNote(null);
  assertNotNull("can't create new note",note);
  note.setName("note for run test");
  Paragraph paragraph=note.addParagraph();
  Map config=paragraph.getConfig();
  config.put("enabled",true);
  paragraph.setConfig(config);
  paragraph.setText("%spark\nval param = z.input(\"param\").toString\nprintln(param)");
  note.persist(null);
  String noteID=note.getId();
  note.runAll();
  int timeout=1;
  while (!paragraph.isTerminated()) {
    Thread.sleep(1000);
    if (timeout++ > 120) {
      LOG.info("testRunParagraphWithParams timeout job.");
      break;
    }
  }
  PostMethod postParagraph=httpPost("/notebook/job/" + noteID + "/"+ paragraph.getId(),"{\"params\": {\"param\": \"hello\", \"param2\": \"world\"}}");
  assertThat("test paragraph run:",postParagraph,isAllowed());
  postParagraph.releaseConnection();
  Thread.sleep(1000);
  Note retrNote=ZeppelinServer.notebook.getNote(noteID);
  Paragraph retrParagraph=retrNote.getParagraph(paragraph.getId());
  Map<String,Object> params=retrParagraph.settings.getParams();
  assertEquals("hello",params.get("param"));
  assertEquals("world",params.get("param2"));
  ZeppelinServer.notebook.removeNote(note.getId(),null);
}
