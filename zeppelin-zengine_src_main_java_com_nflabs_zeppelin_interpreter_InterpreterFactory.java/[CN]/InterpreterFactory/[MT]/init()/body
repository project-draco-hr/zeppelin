{
  ClassLoader oldcl=Thread.currentThread().getContextClassLoader();
  File[] interpreterDirs=new File(conf.getInterpreterDir()).listFiles();
  if (interpreterDirs != null) {
    for (    File path : interpreterDirs) {
      logger.info("Reading " + path.getAbsolutePath());
      URL[] urls=null;
      try {
        urls=recursiveBuildLibList(path);
      }
 catch (      MalformedURLException e1) {
        logger.error("Can't load jars ",e1);
      }
      URLClassLoader ccl=new URLClassLoader(urls,oldcl);
      for (      String className : interpreterClassList) {
        try {
          Class.forName(className,true,ccl);
          Set<String> keys=Interpreter.registeredInterpreters.keySet();
          for (          String intName : keys) {
            if (className.equals(Interpreter.registeredInterpreters.get(intName).getClassName())) {
              Interpreter.registeredInterpreters.get(intName).setPath(path.getAbsolutePath());
              logger.info("Interpreter " + intName + " found. class="+ className);
              cleanCl.put(path.getAbsolutePath(),ccl);
            }
          }
        }
 catch (        ClassNotFoundException e) {
        }
      }
    }
  }
  loadFromFile();
synchronized (interpreterSettings) {
    if (interpreterSettings.size() == 0) {
      HashMap<String,List<RegisteredInterpreter>> groupClassNameMap=new HashMap<String,List<RegisteredInterpreter>>();
      for (      String k : Interpreter.registeredInterpreters.keySet()) {
        RegisteredInterpreter info=Interpreter.registeredInterpreters.get(k);
        if (!groupClassNameMap.containsKey(info.getGroup())) {
          groupClassNameMap.put(info.getGroup(),new LinkedList<RegisteredInterpreter>());
        }
        groupClassNameMap.get(info.getGroup()).add(info);
      }
      for (      String className : interpreterClassList) {
        for (        String groupName : groupClassNameMap.keySet()) {
          List<RegisteredInterpreter> infos=groupClassNameMap.get(groupName);
          boolean found=false;
          Properties p=new Properties();
          for (          RegisteredInterpreter info : infos) {
            if (found == false && info.getClassName().equals(className)) {
              found=true;
            }
            for (            String k : info.getProperties().keySet()) {
              p.put(k,info.getProperties().get(k).getDefaultValue());
            }
          }
          if (found) {
            add(groupName,groupName,false,p);
            groupClassNameMap.remove(groupName);
            break;
          }
        }
      }
    }
  }
  for (  String settingId : interpreterSettings.keySet()) {
    InterpreterSetting setting=interpreterSettings.get(settingId);
    logger.info("Interpreter setting group {} : id={}, name={}",setting.getGroup(),settingId,setting.getName());
    for (    Interpreter interpreter : setting.getInterpreterGroup()) {
      logger.info("  className = {}",interpreter.getClassName());
    }
  }
}
