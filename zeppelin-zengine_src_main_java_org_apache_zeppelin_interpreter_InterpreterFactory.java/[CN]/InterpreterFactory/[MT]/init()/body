{
  String interpreterJson=conf.getInterpreterJson();
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  Path interpretersDir=Paths.get(conf.getInterpreterDir());
  if (Files.exists(interpretersDir)) {
    for (    Path interpreterDir : Files.newDirectoryStream(interpretersDir,new DirectoryStream.Filter<Path>(){
      @Override public boolean accept(      Path entry) throws IOException {
        return Files.exists(entry) && Files.isDirectory(entry);
      }
    }
)) {
      String interpreterDirString=interpreterDir.toString();
      if (!registerInterpreterFromPath(interpreterDirString,interpreterJson)) {
        if (!registerInterpreterFromResource(cl,interpreterDirString,interpreterJson)) {
          URLClassLoader ccl=new URLClassLoader(recursiveBuildLibList(interpreterDir.toFile()),cl);
          for (          String className : interpreterClassList) {
            try {
              Class.forName(className,true,ccl);
              Set<String> interpreterKeys=Interpreter.registeredInterpreters.keySet();
              for (              String interpreterKey : interpreterKeys) {
                if (className.equals(Interpreter.registeredInterpreters.get(interpreterKey).getClassName())) {
                  Interpreter.registeredInterpreters.get(interpreterKey).setPath(interpreterDirString);
                  logger.info("Interpreter " + interpreterKey + " found. class="+ className);
                  cleanCl.put(interpreterDirString,ccl);
                }
              }
            }
 catch (            Throwable t) {
            }
          }
        }
      }
    }
  }
  for (  RegisteredInterpreter registeredInterpreter : Interpreter.registeredInterpreters.values()) {
    logger.debug("Registered: {} -> {}. Properties: {}",registeredInterpreter.getInterpreterKey(),registeredInterpreter.getClassName(),registeredInterpreter.getProperties());
  }
  InterpreterInfo interpreterInfo;
  for (  RegisteredInterpreter r : Interpreter.registeredInterpreters.values()) {
    interpreterInfo=new InterpreterInfo(r.getClassName(),r.getName(),r.isDefaultInterpreter());
    add(r.getGroup(),interpreterInfo,convertInterpreterProperties(r.getProperties()),r.getPath());
  }
  for (  String settingId : interpreterSettingsRef.keySet()) {
    InterpreterSetting setting=interpreterSettingsRef.get(settingId);
    logger.info("InterpreterSettingRef name {}",setting.getName());
  }
  loadFromFile();
  if (0 == interpreterSettings.size()) {
    Map<String,InterpreterSetting> temp=new HashMap<>();
    InterpreterSetting interpreterSetting;
    for (    InterpreterSetting setting : interpreterSettingsRef.values()) {
      interpreterSetting=createFromInterpreterSettingRef(setting);
      temp.put(setting.getName(),interpreterSetting);
    }
    for (    String group : interpreterGroupOrderList) {
      if (null != (interpreterSetting=temp.remove(group))) {
        interpreterSettings.put(interpreterSetting.getId(),interpreterSetting);
      }
    }
    for (    InterpreterSetting setting : temp.values()) {
      interpreterSettings.put(setting.getId(),setting);
    }
    saveToFile();
  }
  for (  String settingId : interpreterSettings.keySet()) {
    InterpreterSetting setting=interpreterSettings.get(settingId);
    logger.info("InterpreterSetting group {} : id={}, name={}",setting.getGroup(),settingId,setting.getName());
  }
}
