{
  String interpreterJson=conf.getInterpreterJson();
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  Path interpretersDir=Paths.get(conf.getInterpreterDir());
  if (Files.exists(interpretersDir)) {
    for (    Path interpreterDir : Files.newDirectoryStream(interpretersDir,new DirectoryStream.Filter<Path>(){
      @Override public boolean accept(      Path entry) throws IOException {
        return Files.exists(entry) && Files.isDirectory(entry);
      }
    }
)) {
      String interpreterDirString=interpreterDir.toString();
      registerInterpreterFromPath(interpreterDirString,interpreterJson);
      registerInterpreterFromResource(cl,interpreterDirString,interpreterJson);
      URLClassLoader ccl=new URLClassLoader(recursiveBuildLibList(interpreterDir.toFile()),cl);
      for (      String className : interpreterClassList) {
        try {
          Class.forName(className,true,ccl);
          Set<String> interpreterKeys=Interpreter.registeredInterpreters.keySet();
          for (          String interpreterKey : interpreterKeys) {
            if (className.equals(Interpreter.registeredInterpreters.get(interpreterKey).getClassName())) {
              Interpreter.registeredInterpreters.get(interpreterKey).setPath(interpreterDirString);
              logger.info("Interpreter " + interpreterKey + " found. class="+ className);
              cleanCl.put(interpreterDirString,ccl);
            }
          }
        }
 catch (        ClassNotFoundException e) {
        }
      }
    }
  }
  for (  RegisteredInterpreter registeredInterpreter : Interpreter.registeredInterpreters.values()) {
    logger.debug("Registered: {} -> {}. Properties: {}",registeredInterpreter.getInterpreterKey(),registeredInterpreter.getClassName(),registeredInterpreter.getProperties());
  }
  loadFromFile();
synchronized (interpreterSettings) {
    if (interpreterSettings.size() == 0) {
      HashMap<String,List<RegisteredInterpreter>> groupClassNameMap=new HashMap<>();
      for (      String k : Interpreter.registeredInterpreters.keySet()) {
        RegisteredInterpreter info=Interpreter.registeredInterpreters.get(k);
        if (!groupClassNameMap.containsKey(info.getGroup())) {
          groupClassNameMap.put(info.getGroup(),new LinkedList<RegisteredInterpreter>());
        }
        groupClassNameMap.get(info.getGroup()).add(info);
      }
      for (      String className : interpreterClassList) {
        for (        String groupName : groupClassNameMap.keySet()) {
          List<RegisteredInterpreter> infos=groupClassNameMap.get(groupName);
          boolean found=false;
          Properties p=new Properties();
          for (          RegisteredInterpreter info : infos) {
            if (found == false && info.getClassName().equals(className)) {
              found=true;
            }
            for (            String k : info.getProperties().keySet()) {
              p.put(k,info.getProperties().get(k).getValue());
            }
          }
          if (found) {
            add(groupName,groupName,new LinkedList<Dependency>(),defaultOption,p);
            groupClassNameMap.remove(groupName);
            break;
          }
        }
      }
    }
  }
  for (  String settingId : interpreterSettings.keySet()) {
    InterpreterSetting setting=interpreterSettings.get(settingId);
    logger.info("Interpreter setting group {} : id={}, name={}",setting.getGroup(),settingId,setting.getName());
  }
}
