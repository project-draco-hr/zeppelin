{
  GsonBuilder builder=new GsonBuilder();
  builder.setPrettyPrinting();
  builder.registerTypeAdapter(InterpreterSetting.InterpreterInfo.class,new InterpreterInfoSerializer());
  Gson gson=builder.create();
  File settingFile=new File(conf.getInterpreterSettingPath());
  if (!settingFile.exists()) {
    return;
  }
  FileInputStream fis=new FileInputStream(settingFile);
  InputStreamReader isr=new InputStreamReader(fis);
  BufferedReader bufferedReader=new BufferedReader(isr);
  StringBuilder sb=new StringBuilder();
  String line;
  while ((line=bufferedReader.readLine()) != null) {
    sb.append(line);
  }
  isr.close();
  fis.close();
  String json=sb.toString();
  InterpreterInfoSaving info=gson.fromJson(json,InterpreterInfoSaving.class);
  for (  String k : info.interpreterSettings.keySet()) {
    InterpreterSetting setting=info.interpreterSettings.get(k);
    setting.getOption().setRemote(true);
    InterpreterSetting intpSetting=new InterpreterSetting(setting.id(),setting.getName(),setting.getGroup(),setting.getInterpreterInfos(),setting.getProperties(),setting.getDependencies(),setting.getOption());
    intpSetting.setInterpreterGroupFactory(this);
    interpreterSettings.put(k,intpSetting);
  }
  this.interpreterBindings=info.interpreterBindings;
  if (info.interpreterRepositories != null) {
    for (    RemoteRepository repo : info.interpreterRepositories) {
      if (!depResolver.getRepos().contains(repo)) {
        this.interpreterRepositories.add(repo);
      }
    }
  }
}
