{
  File settingFile=new File(conf.getInterpreterSettingPath());
  if (!settingFile.exists()) {
    return;
  }
  FileInputStream fis=new FileInputStream(settingFile);
  InputStreamReader isr=new InputStreamReader(fis);
  BufferedReader bufferedReader=new BufferedReader(isr);
  StringBuilder sb=new StringBuilder();
  InterpreterSetting interpreterSettingObject;
  String depClassPath=StringUtils.EMPTY;
  String line;
  while ((line=bufferedReader.readLine()) != null) {
    sb.append(line);
  }
  isr.close();
  fis.close();
  String json=sb.toString();
  InterpreterInfoSaving info=gson.fromJson(json,InterpreterInfoSaving.class);
  for (  String k : info.interpreterSettings.keySet()) {
    InterpreterSetting setting=info.interpreterSettings.get(k);
    setting.getOption().setRemote(true);
    interpreterSettingObject=interpreterSettingsRef.get(setting.getGroup());
    if (interpreterSettingObject == null) {
      logger.warn("can't get InterpreterSetting " + "Information From loaded Interpreter Setting Ref - {} ",setting.getGroup());
      continue;
    }
    depClassPath=interpreterSettingObject.getPath();
    setting.setPath(depClassPath);
    setting.setInterpreterGroupFactory(this);
    loadInterpreterDependencies(setting);
    interpreterSettings.put(k,setting);
  }
  this.interpreterBindings=info.interpreterBindings;
  if (info.interpreterRepositories != null) {
    for (    RemoteRepository repo : info.interpreterRepositories) {
      if (!depResolver.getRepos().contains(repo)) {
        this.interpreterRepositories.add(repo);
      }
    }
  }
}
