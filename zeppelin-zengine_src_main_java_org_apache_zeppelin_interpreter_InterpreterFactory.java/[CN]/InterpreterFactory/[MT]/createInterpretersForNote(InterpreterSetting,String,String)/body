{
  InterpreterGroup interpreterGroup=interpreterSetting.getInterpreterGroup(noteId);
  InterpreterOption option=interpreterSetting.getOption();
  Properties properties=interpreterSetting.getProperties();
  if (option.isExistingProcess) {
    properties.put(Constants.ZEPPELIN_INTERPRETER_HOST,option.getHost());
    properties.put(Constants.ZEPPELIN_INTERPRETER_PORT,option.getPort());
  }
synchronized (interpreterGroup) {
    long interpreterRemovalWaitStart=System.nanoTime();
    long minTimeout=10L * 1000 * 1000000;
    long interpreterRemovalWaitTimeout=Math.max(minTimeout,conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT) * 1000000L * 2);
    while (interpreterGroup.containsKey(key)) {
      if (System.nanoTime() - interpreterRemovalWaitStart > interpreterRemovalWaitTimeout) {
        throw new InterpreterException("Can not create interpreter");
      }
      try {
        interpreterGroup.wait(1000);
      }
 catch (      InterruptedException e) {
        logger.debug(e.getMessage(),e);
      }
    }
  }
  logger.info("Create interpreter instance {} for note {}",interpreterSetting.getName(),noteId);
  List<InterpreterInfo> interpreterInfos=interpreterSetting.getInterpreterInfos();
  String path=interpreterSetting.getPath();
  Interpreter interpreter;
  for (  InterpreterInfo info : interpreterInfos) {
    if (option.isRemote()) {
      if (option.isExistingProcess()) {
        interpreter=connectToRemoteRepl(noteId,info.getClassName(),option.getHost(),option.getPort(),properties);
      }
 else {
        interpreter=createRemoteRepl(path,key,info.getClassName(),properties,interpreterSetting.getId());
      }
    }
 else {
      interpreter=createRepl(interpreterSetting.getPath(),info.getClassName(),properties);
    }
synchronized (interpreterGroup) {
      List<Interpreter> interpreters=interpreterGroup.get(key);
      if (null == interpreters) {
        interpreters=new ArrayList<>();
        interpreterGroup.put(key,interpreters);
      }
      if (info.isDefaultInterpreter()) {
        interpreters.add(0,interpreter);
      }
 else {
        interpreters.add(interpreter);
      }
    }
    logger.info("Interpreter {} {} created",interpreter.getClassName(),interpreter.hashCode());
    interpreter.setInterpreterGroup(interpreterGroup);
  }
}
