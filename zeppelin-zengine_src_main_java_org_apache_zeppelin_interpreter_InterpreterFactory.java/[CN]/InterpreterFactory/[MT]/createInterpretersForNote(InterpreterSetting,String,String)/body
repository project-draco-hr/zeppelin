{
  InterpreterGroup interpreterGroup=interpreterSetting.getInterpreterGroup(noteId);
  String groupName=interpreterSetting.getGroup();
  InterpreterOption option=interpreterSetting.getOption();
  Properties properties=interpreterSetting.getProperties();
  if (option.isExistingProcess) {
    properties.put(Constants.ZEPPELIN_INTERPRETER_HOST,option.getHost());
    properties.put(Constants.ZEPPELIN_INTERPRETER_PORT,option.getPort());
  }
synchronized (interpreterGroup) {
    long interpreterRemovalWaitStart=System.nanoTime();
    long minTimeout=10L * 1000 * 1000000;
    long interpreterRemovalWaitTimeout=Math.max(minTimeout,conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT) * 1000000L * 2);
    while (interpreterGroup.containsKey(key)) {
      if (System.nanoTime() - interpreterRemovalWaitStart > interpreterRemovalWaitTimeout) {
        throw new InterpreterException("Can not create interpreter");
      }
      try {
        interpreterGroup.wait(1000);
      }
 catch (      InterruptedException e) {
        logger.debug(e.getMessage(),e);
      }
    }
  }
  logger.info("Create interpreter instance {} for note {}",interpreterSetting.getName(),noteId);
  for (  String className : interpreterClassList) {
    Set<String> keys=Interpreter.registeredInterpreters.keySet();
    for (    String intName : keys) {
      RegisteredInterpreter info=Interpreter.registeredInterpreters.get(intName);
      if (info.getClassName().equals(className) && info.getGroup().equals(groupName)) {
        Interpreter intp;
        if (option.isRemote()) {
          intp=createRemoteRepl(info.getPath(),key,info.getClassName(),properties,interpreterSetting.id());
        }
 else {
          intp=createRepl(info.getPath(),info.getClassName(),properties);
        }
synchronized (interpreterGroup) {
          List<Interpreter> interpreters=interpreterGroup.get(key);
          if (interpreters == null) {
            interpreters=new LinkedList<Interpreter>();
            interpreterGroup.put(key,interpreters);
          }
          interpreters.add(intp);
        }
        logger.info("Interpreter " + intp.getClassName() + " "+ intp.hashCode()+ " created");
        intp.setInterpreterGroup(interpreterGroup);
        break;
      }
    }
  }
}
